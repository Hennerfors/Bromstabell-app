import streamlit as st
import yaml
from yaml.loader import SafeLoader
import streamlit_authenticator as stauth
import pandas as pd
import pdfplumber
import re
from io import BytesIO
from fpdf import FPDF
from datetime import datetime


# ==============================================================================
# DATADEFINITIONER (Oförändrade)
# ==============================================================================
HASTIGHETS_DATA = {
    'A': {
        (0, 100): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 85, 100), (86, 99, 110), (100, 118, 120), (119, 138, 130), (139, 143, 140), (144, -1, 150)],
        (101, 200): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 85, 100), (86, 103, 110), (104, 124, 120), (125, 146, 130), (147, -1, 140)],
        (201, 300): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 85, 100), (86, 107, 110), (108, 129, 120), (130, 153, 130), (154, -1, 140)],
        (301, 400): [ (0, 60, 60), (61, 68, 70), (69, 72, 80), (73, 74, 90), (75, 87, 100), (88, 109, 110), (110, 129, 120), (130, -1, 130)],
        (401, 460): [ (0, 60, 60), (61, 69, 70), (70, 72, 80), (73, 75, 90), (76, 90, 100), (91, 109, 110), (110, 132, 120), (133, -1, 130)],
        (461, 520): [ (0, 60, 60), (61, 71, 70), (72, 72, 80), (73, 75, 90), (76, 93, 100), (94, 116, 110), (117, 143, 120), (144, -1, 130)],
        (521, 570): [ (0, 60, 60), (61, 72, 70), (73, 75, 80), (76, 78, 90), (79, 97, 100), (98, 119, 110), (120, -1, 120)],
        (571, 620): [ (0, 60, 60), (61, 75, 70), (76, 78, 80), (79, 79, 90), (80, 100, 100), (101, 129, 110), (130, -1, 120)],
        (621, 670): [ (0, 60, 60), (61, 77, 70), (78, 79, 80), (80, 82, 90), (83, 104, 100), (105, 134, 110), (135, -1, 120)],
        (671, 710): [ (0, 60, 40), (61, 62, 50), (63, 64, 60), (65, 79, 70), (80, 82, 80), (83, 87, 90), (88, 109, 100), (110, -1, 110)],
        (711, 750): [ (0, 64, 40), (65, 65, 50), (66, 66, 60), (67, 68, 70), (69, 82, 80), (83, 87, 90), (88, 90, 100), (91, -1, 110)]
    },
    'B': {
        (0, 100): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 85, 100), (86, 99, 110), (100, 118, 120), (119, 121, 130), (122, 124, 140), (125, 134, 150), (135, 143, 160), (144, -1, 170)],
        (101, 200): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 85, 100), (86, 103, 110), (104, 124, 120), (125, 126, 130), (127, 137, 140), (138, 146, 150), (147, -1, 160)],
        (201, 300): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 85, 100), (86, 107, 110), (108, 129, 120), (130, 140, 140), (141, 150, 150), (151, -1, 160)],
        (301, 400): [ (0, 60, 60), (61, 68, 70), (69, 72, 80), (73, 74, 90), (75, 87, 100), (88, 109, 110), (110, 129, 120), (130, 132, 130), (133, 143, 140), (144, 153, 150), (154, -1, 160)],
        (401, 460): [ (0, 60, 60), (61, 69, 70), (70, 72, 80), (73, 75, 90), (76, 90, 100), (91, 109, 110), (110, 132, 120), (133, 134, 130), (135, 136, 140), (137, 147, 150), (148, -1, 160)],
        (461, 520): [ (0, 60, 60), (61, 71, 70), (72, 72, 80), (73, 75, 90), (76, 93, 100), (94, 116, 110), (117, 143, 120), (144, 150, 140), (151, -1, 150)],
        (521, 570): [ (0, 60, 60), (61, 72, 70), (73, 75, 80), (76, 78, 90), (79, 97, 100), (98, 119, 110), (120, -1, 120)],
        (571, 620): [ (0, 60, 60), (61, 75, 70), (76, 78, 80), (79, 79, 90), (80, 100, 100), (101, 129, 110), (130, -1, 120)],
        (621, 670): [ (0, 60, 60), (61, 77, 70), (78, 79, 80), (80, 82, 90), (83, 104, 100), (105, 134, 110), (135, -1, 120)],
        (671, 710): [ (0, 60, 40), (61, 62, 50), (63, 64, 60), (65, 79, 70), (80, 82, 80), (83, 87, 90), (88, 109, 100), (110, -1, 110)],
        (711, 750): [ (0, 64, 40), (65, 65, 50), (66, 66, 60), (67, 68, 70), (69, 82, 80), (83, 87, 90), (88, 90, 100), (91, -1, 110)]
    },
    'C': {
        (0, 100): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 97, 100), (98, 112, 110), (113, 121, 120), (122, 124, 130), (125, 134, 140), (135, 143, 150), (144, -1, 160)],
        (101, 200): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 99, 100), (100, 115, 110), (116, 124, 120), (125, 126, 130), (127, 137, 140), (138, 146, 150), (147, -1, 160)],
        (201, 300): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 102, 100), (103, 118, 110), (119, 126, 120), (127, 129, 130), (130, 140, 140), (141, 150, 150), (151, -1, 160)],
        (301, 400): [ (0, 60, 60), (61, 68, 70), (69, 72, 80), (73, 74, 90), (75, 103, 100), (104, 119, 110), (120, 129, 120), (130, 132, 130), (133, 143, 140), (144, 153, 150), (154, -1, 160)],
        (401, 460): [ (0, 60, 60), (61, 69, 70), (70, 72, 80), (73, 75, 90), (76, 106, 100), (107, 122, 110), (123, 134, 120), (135, 136, 130), (137, 147, 140), (148, -1, 150)],
        (461, 520): [ (0, 60, 60), (61, 71, 70), (72, 72, 80), (73, 75, 90), (76, 107, 100), (108, 126, 110), (127, 137, 120), (138, 140, 130), (141, 150, 140), (151, -1, 150)],
        (521, 570): [ (0, 60, 60), (61, 72, 70), (73, 75, 80), (76, 78, 90), (79, 111, 100), (112, 129, 110), (130, 143, 120), (144, -1, 130)],
        (571, 620): [ (0, 60, 60), (61, 75, 70), (76, 78, 80), (79, 79, 90), (80, 113, 100), (114, 134, 110), (135, 150, 120), (151, -1, 130)],
        (621, 670): [ (0, 60, 60), (61, 77, 70), (78, 79, 80), (80, 82, 90), (83, 116, 100), (117, 141, 110), (142, -1, 120)],
        (671, 710): [ (0, 60, 40), (61, 62, 50), (63, 64, 60), (65, 79, 70), (80, 82, 80), (83, 87, 90), (88, -1, 100)],
        (711, 750): [ (0, 64, 40), (65, 65, 50), (66, 66, 60), (67, 68, 70), (69, 82, 80), (83, 87, 90), (88, 90, 100), (91, -1, 110)]
    },
    'D': {
        (0, 100):   [ (0, 28, 0), (29, 30, 40), (31, 32, 50), (33, 35, 60), (36, 38, 70), (39, 41, 80), (42, 44, 90), (45, 48, 100), (49, 52, 110), (53, 56, 120), (57, 60, 130), (61, 64, 140), (65, -1, 150) ],
        (101, 200): [ (0, 28, 0), (29, 30, 40), (31, 32, 50), (33, 35, 60), (36, 38, 70), (39, 41, 80), (42, 44, 90), (45, 48, 100), (49, 53, 110), (54, 57, 120), (58, 61, 130), (62, 66, 140), (67, -1, 150) ],
        (201, 300): [ (0, 28, 0), (29, 30, 40), (31, 32, 50), (33, 35, 60), (36, 38, 70), (39, 41, 80), (42, 45, 90), (46, 49, 100), (50, 54, 110), (55, 59, 120), (60, 63, 130), (64, 68, 140), (69, -1, 150) ],
        (301, 400): [ (0, 28, 0), (29, 30, 40), (31, 33, 50), (34, 36, 60), (37, 39, 70), (40, 42, 80), (43, 46, 90), (47, 50, 100), (51, 55, 110), (56, 60, 120), (61, 65, 130), (66, -1, 140) ],
        (401, 500): [ (0, 28, 0), (29, 31, 40), (32, 34, 50), (35, 37, 60), (38, 40, 70), (41, 43, 80), (44, 47, 90), (48, 51, 100), (52, 56, 110), (57, 61, 120), (62, 66, 130), (67, -1, 140) ],
        (501, 600): [ (0, 28, 0), (29, 31, 40), (32, 34, 50), (35, 38, 60), (39, 41, 70), (42, 45, 80), (46, 49, 90), (50, 54, 100), (55, 59, 110), (60, 64, 120), (65, -1, 130) ],
        (601, 700): [ (0, 28, 0), (29, 32, 40), (33, 35, 50), (36, 39, 60), (40, 42, 70), (43, 46, 80), (47, 50, 90), (51, 55, 100), (56, 60, 110), (61, -1, 120) ],
        (701, 850): [ (0, 28, 0), (29, 33, 40), (34, 37, 50), (38, 41, 60), (42, 44, 70), (45, 48, 80), (49, 52, 90), (53, 57, 100), (58, -1, 110) ]
    },
    'D+': {
        (0, 100):   [ (0, 35, 0), (36, 38, 120), (39, 41, 130), (42, 44, 140), (45, 48, 150), (49, 52, 160), (53, 56, 170), (57, 60, 180), (61, -1, 190) ],
        (101, 200): [ (0, 35, 0), (36, 38, 120), (39, 41, 130), (42, 45, 140), (46, 49, 150), (50, 53, 160), (54, 57, 170), (58, 61, 180), (62, -1, 190) ],
        (201, 300): [ (0, 35, 0), (36, 39, 120), (40, 42, 130), (43, 46, 140), (47, 50, 150), (51, 54, 160), (55, 58, 170), (59, 63, 180), (64, -1, 190) ],
        (301, 400): [ (0, 35, 0), (36, 40, 120), (41, 43, 130), (44, 47, 140), (48, 51, 150), (52, 55, 160), (56, 60, 170), (61, -1, 180) ],
        (401, 500): [ (0, 35, 0), (36, 41, 120), (42, 44, 130), (45, 48, 140), (49, 52, 150), (53, 57, 160), (58, -1, 170) ],
        (501, 600): [ (0, 35, 0), (36, 42, 120), (43, 45, 130), (46, 49, 140), (50, 54, 150), (55, -1, 160) ],
        (601, 700): [ (0, 35, 0), (36, 43, 120), (44, 47, 130), (48, 51, 140), (52, -1, 150) ],
        (701, 850): [ (0, 35, 0), (36, 45, 120), (46, 49, 130), (50, -1, 140) ]
    },
    'E': {
        (0, 100): [ (0, 57, 40), (58, 61, 50), (62, 66, 60), (67, 70, 70), (71, 75, 80), (76, 80, 90), (81, 85, 100), (86, 90, 110), (91, 95, 120), (96, -1, 130)],
        (101, 200): [ (0, 57, 40), (58, 62, 50), (63, 67, 60), (68, 72, 70), (73, 77, 80), (78, 82, 90), (83, 87, 100), (88, 92, 110), (93, 97, 120), (98, -1, 130)],
        (201, 300): [ (0, 57, 40), (58, 58, 50), (59, 63, 60), (64, 68, 70), (69, 73, 80), (74, 78, 90), (79, 83, 100), (84, 88, 110), (89, 93, 120), (94, 98, 130), (99, -1, 140)],
        (301, 400): [ (0, 57, 40), (58, 59, 50), (60, 64, 60), (65, 69, 70), (70, 74, 80), (75, 80, 90), (81, 85, 100), (86, 90, 110), (91, 95, 120), (96, 100, 130), (101, -1, 140)],
        (401, 460): [ (0, 57, 40), (58, 59, 50), (60, 65, 60), (66, 70, 70), (71, 75, 80), (76, 81, 90), (82, 86, 100), (87, 91, 110), (92, 97, 120), (98, 101, 130), (102, -1, 140)],
        (461, 520): [ (0, 57, 40), (58, 60, 50), (61, 65, 60), (66, 71, 70), (72, 76, 80), (77, 82, 90), (83, 87, 100), (88, 92, 110), (93, 98, 120), (99, 103, 130), (104, -1, 140)],
        (521, 570): [ (0, 57, 40), (58, 60, 50), (61, 66, 60), (67, 71, 70), (72, 77, 80), (78, 82, 90), (83, 88, 100), (89, 93, 110), (94, 99, 120), (100, 104, 130), (105, -1, 140)],
        (571, 620): [ (0, 57, 40), (58, 61, 50), (62, 67, 60), (68, 72, 70), (73, 78, 80), (79, 83, 90), (84, 89, 100), (90, 94, 110), (95, 100, 120), (101, 105, 130), (106, -1, 140)],
        (621, 670): [ (0, 57, 40), (58, 61, 50), (62, 67, 60), (68, 73, 70), (74, 78, 80), (79, 84, 90), (85, 90, 100), (91, 95, 110), (96, 101, 120), (102, 106, 130), (107, -1, 140)],
        (671, 710): [ (0, 57, 40), (58, 62, 50), (63, 68, 60), (69, 73, 70), (74, 79, 80), (80, 85, 90), (86, 90, 100), (91, 96, 110), (97, 101, 120), (102, 107, 130), (108, -1, 140)],
        (711, 750): [ (0, 57, 40), (58, 62, 50), (63, 68, 60), (69, 74, 70), (75, 80, 80), (81, 86, 90), (87, 92, 100), (93, 98, 110), (99, 104, 120), (105, 109, 130), (110, -1, 140)],
        (751, 780): [ (0, 57, 40), (58, 59, 50), (60, 63, 60), (64, 69, 70), (70, 76, 80), (77, 82, 90), (83, 89, 100), (90, 95, 110), (96, 101, 120), (102, 107, 130), (108, 112, 140), (113, -1, 150)],
        (781, 810): [ (0, 57, 40), (58, 60, 50), (61, 64, 60), (65, 71, 70), (72, 78, 80), (79, 85, 90), (86, 92, 100), (93, 99, 110), (100, 104, 120), (105, 110, 130), (111, 116, 140), (117, -1, 150)],
        (811, 850): [ (0, 57, 40), (58, 58, 50), (59, 67, 60), (68, 75, 70), (76, 82, 80), (83, 89, 90), (90, 97, 100), (98, 103, 110), (104, 109, 120), (110, 116, 130), (117, 122, 140), (123, -1, 150)],
    },
    'EM': {
        (0, 400): [ (0, 29, 40), (30, 30, 50), (31, 33, 60), (34, 37, 70), (38, 41, 80), (42, 45, 90), (46, 49, 100), (50, 52, 110), (53, 58, 120), (59, 63, 130), (64, 67, 140), (68, 73, 150), (74, 78, 160), (79, 83, 170), (84, 88, 180), (89, 93, 190), (94, -1, 200)],
        (401, 460): [ (0, 29, 40), (30, 30, 50), (31, 33, 60), (34, 37, 70), (38, 41, 80), (42, 46, 90), (47, 49, 100), (50, 53, 110), (54, 58, 120), (59, 63, 130), (64, 68, 140), (69, 74, 150), (75, 79, 160), (80, 84, 170), (85, 89, 180), (90, 94, 190), (95, -1, 200)],
        (461, 520): [ (0, 29, 40), (30, 30, 50), (31, 34, 60), (35, 37, 70), (38, 42, 80), (43, 46, 90), (47, 50, 100), (51, 54, 110), (55, 59, 120), (60, 64, 130), (65, 69, 140), (70, 75, 150), (76, 80, 160), (81, 85, 170), (86, 90, 180), (91, 96, 190), (97, -1, 200)],
        (521, 570): [ (0, 29, 40), (30, 31, 50), (32, 34, 60), (35, 38, 70), (39, 42, 80), (43, 47, 90), (48, 51, 100), (52, 54, 110), (55, 60, 120), (61, 65, 130), (66, 70, 140), (71, 75, 150), (76, 81, 160), (82, 86, 170), (87, 91, 180), (92, 97, 190), (98, -1, 200)],
        (571, 620): [ (0, 29, 40), (30, 31, 50), (32, 35, 60), (36, 38, 70), (39, 43, 80), (44, 47, 90), (48, 51, 100), (52, 55, 110), (56, 60, 120), (61, 65, 130), (66, 71, 140), (72, 76, 150), (77, 82, 160), (83, 87, 170), (88, 92, 180), (93, 98, 190), (99, -1, 200)],
        (621, 670): [ (0, 29, 40), (30, 31, 50), (32, 35, 60), (36, 39, 70), (40, 43, 80), (44, 48, 90), (49, 52, 100), (53, 56, 110), (57, 61, 120), (62, 66, 130), (67, 72, 140), (73, 77, 150), (78, 83, 160), (84, 88, 170), (89, 94, 180), (95, 99, 190), (100, -1, 200)],
        (671, 710): [ (0, 29, 40), (30, 31, 50), (32, 35, 60), (36, 39, 70), (40, 43, 80), (44, 48, 90), (49, 52, 100), (53, 56, 110), (57, 61, 120), (62, 67, 130), (68, 73, 140), (74, 79, 150), (80, 85, 160), (86, 91, 170), (92, 97, 180), (98, 103, 190), (104, -1, 200)],
        (711, 750): [ (0, 29, 40), (30, 32, 50), (33, 36, 60), (37, 39, 70), (40, 44, 80), (45, 49, 90), (50, 53, 100), (54, 56, 110), (57, 63, 120), (64, 70, 130), (71, 76, 140), (77, 82, 150), (83, 89, 160), (90, 95, 170), (96, 101, 180), (102, 106, 190), (107, -1, 200)],
        (751, 780): [ (0, 29, 40), (30, 32, 50), (33, 36, 60), (37, 40, 70), (41, 45, 80), (46, 50, 90), (51, 54, 100), (55, 58, 110), (59, 65, 120), (66, 71, 130), (72, 78, 140), (79, 85, 150), (86, 91, 160), (92, 98, 170), (99, 103, 180), (104, 109, 190), (110, -1, 200)],
        (781, 810): [ (0, 29, 40), (30, 33, 50), (34, 37, 60), (38, 41, 70), (42, 46, 80), (47, 51, 90), (52, 55, 100), (56, 60, 110), (61, 67, 120), (68, 74, 130), (75, 80, 140), (81, 87, 150), (88, 94, 160), (95, 100, 170), (101, 106, 180), (107, 112, 190), (113, -1, 200)],
        (811, 850): [ (0, 29, 40), (30, 30, 50), (31, 34, 60), (35, 38, 70), (39, 43, 80), (44, 47, 90), (48, 53, 100), (54, 57, 110), (58, 69, 120), (70, 77, 130), (78, 84, 140), (85, 91, 150), (92, 98, 160), (99, 104, 170), (105, 111, 180), (112, 117, 190), (118, -1, 200)],
        (851, 900): [ (0, 29, 40), (30, 31, 50), (32, 36, 60), (37, 40, 70), (41, 45, 80), (46, 50, 90), (51, 56, 100), (57, 60, 110), (61, 73, 120), (74, 81, 130), (82, 89, 140), (90, 97, 150), (98, 103, 160), (104, 110, 170), (111, 117, 180), (118, 123, 190), (124, -1, 200)]
    }
}
NORSKA_TABELLER = {
    "I": {
        0: {15: 5, 20: 5, 25: 6, 30: 7, 35: 7, 40: 8, 45: 10, 50: 13, 55: 16, 60: 20, 65: 24, 70: 29, 75: 35, 80: 42, 85: 52, 90: 59, 95: 69, 100: 79, 105: 89, 110: 98, 115: 109, 120: 120},
        1: {15: 5, 20: 5, 25: 6, 30: 7, 35: 7, 40: 8, 45: 10, 50: 14, 55: 17, 60: 22, 65: 26, 70: 31, 75: 37, 80: 44, 85: 52, 90: 61, 95: 71, 100: 81, 105: 91, 110: 100, 115: 111, 120: 122},
        2: {15: 5, 20: 5, 25: 6, 30: 7, 35: 8, 40: 9, 45: 10, 50: 15, 55: 19, 60: 23, 65: 28, 70: 32, 75: 39, 80: 46, 85: 54, 90: 63, 95: 72, 100: 82, 105: 92, 110: 102, 115: 113, 120: 124},
        3: {15: 5, 20: 5, 25: 6, 30: 7, 35: 8, 40: 9, 45: 11, 50: 16, 55: 20, 60: 24, 65: 34, 70: 41, 75: 48, 80: 56, 90: 65, 95: 74, 100: 84, 105: 94, 110: 104, 115: 115, 120: 126},
        4: {15: 5, 20: 6, 25: 7, 30: 8, 35: 9, 40: 10, 45: 12, 55: 21, 60: 26, 65: 36, 70: 43, 75: 50, 80: 58, 90: 67, 95: 76, 100: 86, 105: 96, 110: 106, 115: 117, 120: 128},
        5: {15: 5, 20: 6, 25: 7, 30: 8, 35: 9, 40: 11, 45: 14, 50: 18, 55: 23, 60: 27, 65: 34, 70: 45, 75: 52, 80: 60, 90: 69, 95: 78, 100: 87, 105: 97, 110: 108, 115: 119, 120: 130},
        6: {15: 6, 20: 7, 25: 8, 30: 9, 35: 10, 40: 11, 45: 12, 50: 15, 55: 19, 60: 24, 65: 36, 70: 40, 75: 47, 80: 61, 90: 71, 95: 80, 100: 89, 105: 99, 110: 110, 115: 121, 120: 132},
        7: {15: 6, 20: 7, 25: 9, 30: 10, 40: 13, 45: 16, 55: 25, 60: 30, 65: 37, 70: 49, 75: 56, 80: 63, 90: 72, 95: 82, 100: 91, 105: 101, 110: 112, 115: 123, 120: 134},
        8: {15: 6, 20: 8, 25: 10, 30: 11, 40: 15, 45: 18, 55: 26, 60: 32, 65: 38, 70: 43, 75: 50, 80: 57, 85: 63, 90: 73, 95: 83, 100: 92, 105: 103, 110: 113, 115: 124, 120: 136},
        9: {15: 7, 20: 9, 25: 11, 30: 13, 40: 17, 45: 19, 55: 28, 60: 33, 65: 44, 70: 51, 75: 58, 80: 64, 90: 74, 95: 84, 100: 94, 105: 104, 110: 115, 115: 125, 120: 138},
        10: {15: 7, 20: 9, 25: 11, 30: 13, 35: 14, 40: 18, 45: 20, 55: 29, 60: 34, 65: 40, 70: 45, 75: 52, 80: 59, 85: 65, 90: 75, 95: 85, 100: 95, 105: 105, 110: 116, 115: 126, 120: 140},
        11: {15: 8, 20: 10, 25: 12, 30: 14, 35: 16, 40: 19, 55: 26, 60: 31, 65: 36, 70: 41, 75: 46, 80: 53, 85: 60, 90: 66, 95: 76, 100: 86, 105: 96, 110: 107, 115: 117, 120: 128},
        12: {15: 8, 20: 12, 25: 13, 30: 15, 35: 17, 40: 20, 45: 23, 50: 27, 55: 32, 60: 37, 65: 42, 70: 47, 75: 54, 80: 61, 85: 68, 90: 77, 95: 87, 100: 98, 105: 108, 110: 119, 115: 130, 120: 144},
        13: {15: 8, 20: 12, 25: 14, 30: 16, 40: 21, 45: 25, 55: 33, 60: 38, 65: 43, 70: 48, 75: 55, 80: 62, 85: 69, 90: 78, 95: 88, 100: 99, 105: 109, 110: 120, 115: 132, 120: 146},
        14: {15: 9, 20: 13, 25: 15, 30: 17, 40: 22, 45: 26, 55: 34, 60: 39, 65: 44, 70: 49, 75: 56, 80: 63, 85: 70, 90: 79, 95: 89, 100: 100, 105: 110, 110: 122, 115: 134, 120: 148},
        15: {15: 9, 20: 14, 25: 16, 30: 18, 40: 23, 45: 27, 55: 35, 60: 40, 65: 45, 70: 50, 75: 58, 80: 64, 85: 72, 90: 81, 95: 90, 100: 101, 105: 112, 110: 124, 115: 136, 120: 150},
        16: {15: 10, 20: 15, 25: 17, 30: 20, 35: 22, 40: 25, 45: 29, 50: 33, 55: 37, 60: 42, 65: 47, 70: 52, 75: 60, 80: 66, 85: 74, 90: 83, 95: 92, 100: 102, 105: 114, 110: 126},
        17: {15: 10, 20: 16, 25: 18, 30: 21, 35: 23, 45: 30, 50: 34, 55: 38, 60: 44, 65: 48, 70: 54, 75: 62, 80: 68, 85: 76, 90: 85, 95: 94, 100: 104, 105: 116, 110: 128},
        18: {15: 11, 20: 17, 25: 19, 30: 22, 40: 28, 45: 31, 50: 35, 55: 40, 60: 46, 65: 50, 70: 56, 75: 64, 80: 70, 85: 78, 90: 87, 95: 96, 100: 106, 105: 118, 110: 130},
        19: {15: 12, 20: 18, 25: 20, 30: 23, 40: 29, 45: 32, 55: 42, 60: 48, 65: 58, 70: 66, 75: 72, 80: 80, 90: 89, 95: 98, 100: 108, 105: 120, 110: 132},
        20: {15: 13, 20: 19, 25: 22, 30: 24, 40: 30, 45: 34, 50: 38, 55: 44, 60: 49, 65: 54, 70: 60, 75: 68, 80: 75, 85: 82, 90: 91, 95: 100, 100: 110, 105: 122, 110: 135},
        21: {15: 14, 20: 20, 25: 23, 30: 25, 35: 28, 40: 32, 45: 35, 50: 40, 55: 46, 60: 51, 65: 56, 70: 62, 75: 70, 80: 76, 85: 84, 90: 93, 95: 102, 100: 113, 105: 124},
        22: {15: 15, 20: 21, 25: 24, 30: 26, 35: 29, 40: 33, 45: 36, 50: 41, 55: 47, 60: 52, 65: 57, 70: 64, 75: 71, 80: 78, 85: 86, 90: 95, 95: 104, 100: 114, 105: 126},
        23: {15: 17, 20: 22, 25: 25, 30: 27, 35: 30, 40: 34, 45: 38, 50: 43, 55: 48, 60: 53, 65: 59, 70: 65, 75: 72, 80: 79, 85: 88, 90: 97, 95: 106, 100: 116, 105: 129},
        24: {15: 18, 20: 23, 25: 26, 30: 28, 35: 31, 40: 35, 45: 39, 50: 44, 55: 49, 60: 55, 65: 60, 70: 66, 75: 73, 80: 80, 85: 90, 90: 98, 95: 108, 100: 118, 105: 133},
        25: {15: 19, 20: 24, 25: 27, 30: 29, 35: 32, 40: 36, 45: 40, 50: 45, 55: 50, 60: 56, 65: 62, 70: 68, 75: 74, 80: 82, 85: 91, 90: 100, 95: 110, 100: 120},
        30: {15: 26, 20: 29, 25: 31, 30: 34, 35: 38, 40: 42, 45: 46, 50: 50, 55: 56, 60: 61, 65: 69, 70: 76, 75: 83, 80: 91, 85: 100, 90: 109},
        35: {15: 31, 20: 35, 25: 39, 30: 43, 35: 48, 40: 53, 45: 60, 50: 69, 55: 70, 60: 79},
        40: {15: 38, 20: 42, 25: 45, 30: 49, 35: 54, 40: 60, 45: 69, 50: 78},
        45: {15: 44, 20: 47, 25: 51, 30: 56, 35: 61, 40: 68, 45: 77},
        50: {15: 55, 20: 58, 25: 63, 30: 67, 35: 72, 40: 78},
        55: {15: 64, 20: 67, 25: 70, 30: 77}
    },
    "II": {
        0: {15: 5, 20: 5, 25: 6, 30: 5, 35: 5, 40: 7, 45: 10, 50: 13, 55: 18, 60: 23, 65: 29, 70: 36, 75: 45, 80: 55},
        4: {15: 5, 20: 5, 25: 5, 30: 7, 35: 9, 40: 11, 45: 14, 50: 18, 55: 23, 60: 28, 65: 34, 70: 42, 75: 51, 80: 62},
        5: {15: 5, 20: 6, 25: 6, 30: 8, 35: 10, 40: 12, 45: 15, 50: 19, 55: 24, 60: 29, 65: 36, 70: 44, 75: 53, 80: 64},
        6: {15: 5, 20: 6, 25: 7, 30: 9, 35: 11, 40: 13, 45: 17, 50: 20, 55: 25, 60: 31, 65: 37, 70: 45, 75: 55, 80: 66},
        7: {15: 5, 20: 7, 25: 8, 30: 10, 35: 11, 40: 14, 45: 18, 50: 21, 55: 26, 60: 32, 65: 39, 70: 47, 75: 56, 80: 68},
        8: {15: 5, 20: 8, 25: 9, 30: 11, 35: 12, 40: 15, 45: 18, 50: 23, 55: 28, 60: 33, 65: 40, 70: 48, 75: 58, 80: 70},
        9: {15: 5, 20: 9, 25: 10, 30: 11, 35: 14, 40: 17, 45: 20, 50: 24, 55: 29, 60: 35, 65: 42, 70: 50, 75: 60, 80: 72},
        10: {15: 6, 20: 10, 25: 11, 30: 12, 35: 15, 40: 18, 45: 21, 50: 26, 55: 31, 60: 36, 65: 43, 70: 52, 75: 62, 80: 74},
        11: {15: 7, 20: 10, 25: 11, 30: 13, 35: 16, 40: 18, 45: 22, 50: 26, 55: 32, 60: 38, 65: 45, 70: 54, 75: 63, 80: 76},
        12: {15: 8, 20: 11, 25: 12, 30: 14, 35: 17, 40: 20, 45: 24, 50: 28, 55: 33, 60: 40, 65: 47, 70: 55, 75: 65, 80: 77},
        13: {15: 9, 20: 12, 25: 14, 30: 16, 35: 18, 40: 21, 45: 25, 50: 29, 55: 34, 60: 40, 65: 48, 70: 56, 75: 67, 80: 80},
        14: {15: 9, 20: 13, 25: 15, 30: 17, 35: 19, 40: 22, 45: 26, 50: 31, 55: 36, 60: 42, 65: 49, 70: 58, 75: 69, 80: 82},
        15: {15: 10, 20: 14, 25: 16, 30: 18, 35: 20, 40: 24, 45: 27, 50: 32, 55: 38, 60: 44, 65: 51, 70: 60, 75: 70, 80: 84},
        16: {15: 11, 20: 15, 25: 17, 30: 18, 35: 21, 40: 25, 45: 28, 50: 33, 55: 39, 60: 46, 65: 53, 70: 62, 75: 72, 80: 85},
        17: {15: 11, 20: 16, 25: 18, 30: 19, 35: 22, 40: 26, 45: 30, 50: 34, 55: 40, 60: 47, 65: 55, 70: 63, 75: 74, 80: 87},
        18: {15: 12, 20: 17, 25: 18, 30: 20, 35: 24, 40: 27, 45: 31, 50: 36, 55: 41, 60: 48, 65: 56, 70: 65, 75: 76, 80: 90},
        19: {15: 13, 20: 18, 25: 19, 30: 22, 35: 25, 40: 28, 45: 33, 50: 38, 55: 43, 60: 50, 65: 58, 70: 67, 75: 77},
        20: {15: 14, 20: 18, 25: 20, 30: 23, 35: 26, 40: 29, 45: 33, 50: 39, 55: 45, 60: 51, 65: 59, 70: 69, 75: 79},
        21: {15: 15, 20: 19, 25: 21, 30: 24, 35: 27, 40: 31, 45: 35, 50: 40, 55: 46, 60: 53, 65: 61, 70: 70},
        22: {15: 16, 20: 20, 25: 22, 30: 25, 35: 28, 40: 32, 45: 36, 50: 41, 55: 48, 60: 55, 65: 62, 70: 72},
        23: {15: 17, 20: 21, 25: 23, 30: 26, 35: 29, 40: 33, 45: 38, 50: 43, 55: 49, 60: 56, 65: 64, 70: 74},
        24: {15: 18, 20: 22, 25: 24, 30: 26, 35: 31, 40: 34, 45: 39, 50: 44, 55: 50, 60: 57, 65: 66, 70: 75},
        25: {15: 19, 20: 23, 25: 26, 30: 28, 35: 32, 40: 36, 45: 40, 50: 46, 55: 52, 60: 59, 65: 67, 70: 77},
        30: {15: 26, 20: 28, 25: 31, 30: 33, 35: 38, 40: 42, 45: 47, 50: 53, 55: 59, 60: 67, 65: 76},
        35: {15: 31, 20: 34, 25: 39, 30: 43, 35: 48, 40: 55, 45: 63, 50: 72, 55: 83},
        40: {15: 38, 20: 40, 25: 45, 30: 50, 35: 57, 40: 67, 45: 77},
        45: {15: 46, 20: 48, 25: 54, 30: 59, 35: 67, 40: 76},
        50: {15: 55, 20: 59, 25: 63, 30: 70, 35: 78},
        55: {20: 67, 25: 71, 30: 77, 35: 84}
    },
    "III": {
        0: {20: 20, 25: 20, 30: 20, 35: 20, 40: 20, 45: 20, 50: 20, 55: 20, 60: 20, 65: 20, 70: 20, 75: 24, 80: 28, 85: 33, 90: 38, 95: 43, 100: 49, 105: 55, 110: 61, 115: 68, 120: 75},
        1: {20: 20, 25: 20, 30: 20, 35: 20, 40: 20, 45: 20, 50: 20, 55: 20, 60: 20, 65: 22, 70: 22, 75: 26, 80: 30, 85: 35, 90: 39, 95: 45, 100: 51, 105: 57, 110: 63, 115: 70, 120: 77},
        2: {20: 20, 25: 20, 30: 20, 35: 20, 40: 20, 45: 20, 50: 20, 55: 20, 60: 20, 65: 23, 70: 24, 75: 28, 80: 32, 85: 36, 90: 41, 95: 47, 100: 53, 105: 59, 110: 65, 115: 72, 120: 79},
        3: {20: 20, 25: 20, 30: 20, 35: 20, 40: 20, 45: 20, 50: 20, 55: 20, 60: 20, 65: 24, 70: 25, 75: 29, 80: 33, 85: 38, 90: 43, 95: 48, 100: 54, 105: 60, 110: 66, 115: 73, 120: 80},
        4: {20: 20, 25: 20, 30: 20, 35: 20, 40: 20, 45: 20, 50: 20, 55: 20, 60: 22, 65: 26, 70: 27, 75: 31, 80: 35, 85: 39, 90: 44, 95: 50, 100: 56, 105: 62, 110: 68, 115: 75, 120: 82},
        5: {20: 20, 25: 20, 30: 20, 35: 20, 40: 20, 45: 20, 50: 20, 55: 20, 60: 23, 65: 27, 70: 29, 75: 31, 80: 35, 85: 39, 90: 44, 95: 50, 100: 56, 105: 62, 110: 68, 115: 75, 120: 82},
        6: {20: 20, 25: 20, 30: 20, 35: 20, 40: 20, 45: 20, 50: 20, 55: 20, 60: 24, 65: 28, 70: 30, 75: 31, 80: 35, 85: 39, 90: 44, 95: 50, 100: 56, 105: 62, 110: 68, 115: 75, 120: 82},
        7: {20: 20, 25: 20, 30: 20, 35: 20, 40: 20, 45: 20, 50: 20, 55: 22, 60: 26, 65: 30, 70: 32, 75: 37, 80: 41, 85: 46, 90: 52, 95: 57, 100: 63, 105: 70, 110: 76, 115: 83, 120: 91},
        8: {20: 20, 25: 20, 30: 20, 35: 20, 40: 20, 45: 20, 50: 20, 55: 23, 60: 27, 65: 31, 70: 34, 75: 38, 80: 43, 85: 48, 90: 53, 95: 59, 100: 65, 105: 71, 110: 78, 115: 85, 120: 92},
        10: {20: 20, 25: 20, 30: 20, 35: 20, 40: 20, 45: 20, 50: 22, 55: 25, 60: 29, 65: 33, 70: 37, 75: 42, 80: 46, 85: 52, 90: 57, 95: 63, 100: 69, 105: 75, 110: 81, 115: 88, 120: 96},
        12: {20: 20, 25: 20, 30: 20, 35: 20, 40: 20, 45: 23, 50: 26, 55: 29, 60: 33, 65: 36, 70: 41, 75: 45, 80: 50, 85: 55, 90: 60, 95: 66, 100: 72, 105: 78, 110: 85, 115: 92, 120: 99},
        14: {20: 20, 25: 20, 30: 20, 35: 20, 40: 21, 45: 24, 50: 27, 55: 30, 60: 34, 65: 39, 70: 44, 75: 49, 80: 53, 85: 58, 90: 64, 95: 69, 100: 75, 105: 82, 110: 88, 115: 95, 120: 102},
        16: {20: 20, 25: 21, 30: 23, 35: 25, 40: 27, 45: 30, 50: 33, 55: 36, 60: 39, 65: 43, 70: 47, 75: 52, 80: 57, 85: 62, 90: 67, 95: 73, 100: 79, 105: 85, 110: 92, 115: 99, 120: 106},
        18: {20: 23, 25: 25, 30: 26, 35: 28, 40: 31, 45: 33, 50: 36, 55: 39, 60: 43, 65: 47, 70: 51, 75: 55, 80: 60, 85: 65, 90: 71, 95: 76, 100: 82, 105: 89, 110: 95, 115: 102, 120: 109},
        20: {20: 27, 25: 28, 30: 30, 35: 32, 40: 34, 45: 37, 50: 40, 55: 43, 60: 46, 65: 50, 70: 54, 75: 59, 80: 64, 85: 69, 90: 74, 95: 80, 100: 86, 105: 92, 110: 99, 115: 105, 120: 113},
        22: {20: 30, 25: 33, 30: 33, 35: 35, 40: 37, 45: 40, 50: 43, 55: 46, 60: 50, 65: 54, 70: 58, 75: 62, 80: 67, 85: 72, 90: 77, 95: 83, 100: 89, 105: 95, 110: 102, 115: 109, 120: 116},
        25: {20: 35, 25: 37, 30: 40, 35: 40, 40: 43, 45: 45, 50: 48, 55: 51, 60: 55, 65: 59, 70: 63, 75: 67, 80: 72, 85: 77, 90: 83, 95: 88, 100: 94, 105: 100, 110: 107, 115: 114, 120: 121},
        30: {20: 44, 25: 45, 30: 47, 35: 49, 40: 51, 45: 54, 50: 57, 55: 60, 60: 63, 65: 67, 70: 71, 75: 76, 80: 81, 85: 86, 90: 91, 95: 97, 100: 103, 105: 109, 110: 116, 115: 123, 120: 130}
    },
    "IV": {
        0: {20: 20, 30: 20, 40: 20, 50: 20, 60: 20, 70: 20, 80: 20, 90: 20, 100: 20, 110: 23, 120: 29},
        1: {20: 20, 30: 20, 40: 20, 50: 20, 60: 20, 70: 20, 80: 20, 90: 20, 100: 20, 110: 24, 120: 30},
        2: {20: 20, 30: 20, 40: 20, 50: 20, 60: 20, 70: 20, 80: 20, 90: 20, 100: 20, 110: 26, 120: 32},
        3: {20: 20, 30: 20, 40: 20, 50: 20, 60: 20, 70: 20, 80: 20, 90: 20, 100: 22, 110: 27, 120: 33},
        4: {20: 20, 30: 20, 40: 20, 50: 20, 60: 20, 70: 20, 80: 20, 90: 20, 100: 23, 110: 28, 120: 35},
        5: {20: 20, 30: 20, 40: 20, 50: 20, 60: 20, 70: 20, 80: 20, 90: 20, 100: 25, 110: 30, 120: 36},
        6: {20: 20, 30: 20, 40: 20, 50: 20, 60: 20, 70: 20, 80: 20, 90: 20, 100: 26, 110: 31, 120: 38},
        8: {20: 20, 30: 20, 40: 20, 50: 20, 60: 20, 70: 20, 80: 20, 90: 20, 100: 29, 110: 34, 120: 41},
        10: {20: 20, 30: 20, 40: 20, 50: 20, 60: 21, 70: 21, 80: 22, 90: 22, 100: 32, 110: 37, 120: 44},
        12: {20: 20, 30: 21, 40: 22, 50: 22, 60: 25, 70: 25, 80: 26, 90: 26, 100: 35, 110: 40, 120: 47},
        15: {20: 28, 30: 28, 40: 29, 50: 29, 60: 31, 70: 31, 80: 32, 90: 32, 100: 39, 110: 45, 120: 52},
        18: {20: 34, 30: 34, 40: 35, 50: 35, 60: 37, 70: 37, 80: 38, 90: 38, 100: 44, 110: 50, 120: 57},
        20: {20: 39, 30: 39, 40: 40, 50: 40, 60: 41, 70: 41, 80: 42, 90: 41, 100: 47, 110: 53, 120: 60},
        22: {20: 43, 30: 43, 40: 44, 50: 44, 60: 45, 70: 45, 80: 46, 90: 45, 100: 50, 110: 56, 120: 63},
        25: {20: 50, 30: 50, 40: 51, 50: 51, 60: 52, 70: 52, 80: 53, 90: 42, 100: 55, 110: 61, 120: 68},
        27: {20: 54, 30: 54, 40: 55, 50: 55, 60: 56, 70: 56, 80: 57, 90: 46, 100: 58, 110: 64, 120: 71},
        30: {20: 60, 30: 60, 40: 61, 50: 61, 60: 62, 70: 62, 80: 63, 90: 62, 100: 64, 110: 69, 120: 76},
    }
}

# ==============================================================================
# LOGIK OCH FUNKTIONER
# ==============================================================================

# ... (hitta_max_hastighet och andra funktioner är oförändrade) ...
def hitta_max_hastighet(bana, tåglängd, bromsprocent):
    if bana not in HASTIGHETS_DATA:
        return "Okänd bana vald."
    valt_längdintervall = None
    for (min_längd, max_längd), data in HASTIGHETS_DATA[bana].items():
        if min_längd <= tåglängd <= max_längd:
            valt_längdintervall = data
            break
    if not valt_längdintervall:
        return "Tåglängden finns inte med i tabellen för den valda banan."
    for min_broms, max_broms, hastighet in valt_längdintervall:
        if max_broms == -1 and bromsprocent >= min_broms:
            return hastighet
        if min_broms <= bromsprocent <= max_broms:
            return hastighet
    return "Ingen hastighet hittades för angiven bromsprocent."

def sök_i_enkel_bremsetabell(tabell_data, fall, bromsprocent, tabell_namn):
    aktuellt_fall = fall
    if tabell_namn in ["II", "III", "IV"] and 1 <= fall <= 3:
        aktuellt_fall = 4
    if aktuellt_fall not in tabell_data:
        return f"Fall {fall}‰ ej funnet"
    hastighetsdata_for_fall = tabell_data[aktuellt_fall]
    sorterade_hastigheter = sorted(hastighetsdata_for_fall.keys(), reverse=True)
    for hastighet in sorterade_hastigheter:
        erforderlig_bremseprosent = hastighetsdata_for_fall[hastighet]
        if bromsprocent >= erforderlig_bremseprosent:
            return hastighet
    return "För låg broms"

def hitta_norska_hastigheter(fall, bromsprocent):
    resultat_per_tabell = {}
    for namn, data in NORSKA_TABELLER.items():
        resultat = sök_i_enkel_bremsetabell(data, fall, bromsprocent, namn)
        resultat_per_tabell[f"Tabell {namn}"] = resultat
    return resultat_per_tabell

@st.cache_data
def load_pdf_data(file_path):
    """
    Förbättrad parser som hanterar komplexa Trafikverket-PDFer.
    Den bygger upp datan rad för rad och hanterar sektioner och tillstånd.

    OBS: Denna funktion är cachad med @st.cache_data, vilket innebär att resultatet återanvänds
    för samma filväg (file_path) tills filen ändras eller appen startas om. Om PDF-filen uppdateras
    måste du starta om appen eller ändra filvägen för att cachen ska invalidieras och ny data läsas in.
    """
    all_rows = []
    
    current_section = "Okänd"
    current_system = ""
    current_sth = "Okänd"

    km_pattern = re.compile(r"^\s*(\d{1,4}\s?\+\s?\d{1,4}(?:\s*-\s*\d{1,4}\s?\+\s?\d{1,4})?|\(\d{1,4}\+\d{1,4}\))")
    sth_pattern = re.compile(r"(\d{1,3}/\d{1,3}|\d{1,3}|Enl\s?hsi)")
    section_pattern = re.compile(r"^\((.*?)\s*-\s*(.*?)\)")
    system_pattern = re.compile(r"^(Enkelspår|Dubbelspår|System H|System E|Driftplatser)")
    ignore_pattern = re.compile(r"(TC\sBODEN|TRAFIKVERKET|UNDERLAG|Version|Reservsidor|central forts|Le\s*→?\s*Bjf|D\d+)", re.IGNORECASE)

    try:
        with pdfplumber.open(file_path) as pdf:
            for page_num, page in enumerate(pdf.pages, 1):
                lines = page.extract_text_lines(layout=True, strip=True)
                
                for line_data in lines:
                    line = line_data['text']

                    if ignore_pattern.search(line):
                        continue
                    
                    section_match = section_pattern.search(line)
                    system_match = system_pattern.search(line)
                    km_match = km_pattern.search(line)
                    
                    if section_match and not km_match:
                        current_section = section_match.group(0)
                        current_system = ""
                        continue
                    
                    if system_match and not km_match:
                        current_system += " " + line
                        current_system = current_system.strip()
                        continue
                        
                    columns = re.split(r'\s{2,}', line)

                    km_from_col = ""
                    if columns:
                        km_match_col = km_pattern.match(columns[0])
                        if km_match_col:
                            km_from_col = km_match_col.group(0).replace(" ", "")
                    
                    if km_from_col:
                        km_str = km_from_col
                        info_parts = columns[1:]
                        
                        if len(info_parts) > 0:
                            sth_match = sth_pattern.match(info_parts[0])
                            if sth_match:
                                current_sth = sth_match.group(0)
                                information = " ".join(info_parts[1:])
                            else:
                                information = " ".join(info_parts)
                        else:
                            information = ""

                        try:
                            cleaned_km = km_str.replace('(', '').replace(')', '').split('-')[0]
                            if '+' in cleaned_km:
                                parts = cleaned_km.split('+')
                                km_numeric = float(parts[0]) + float(parts[1]) / 1000
                            else:
                                km_numeric = float(cleaned_km)
                        except (ValueError, IndexError):
                            km_numeric = 0.0

                        row = {
                            "Sträcka/System": f"{current_section}.{current_system}",
                            "Km_str": km_str,
                            "Km_numeric": km_numeric,
                            "Sth": current_sth,
                            "Information": information.strip(),
                            "Källa": f"Sida {page_num}"
                        }
                        all_rows.append(row)
                    
                    elif len(columns) == 1 and sth_pattern.fullmatch(columns[0]):
                        current_sth = columns[0]

                    elif all_rows:
                        all_rows[-1]["Information"] += " " + line.strip()

    except Exception as e:
        st.error(f"Ett fel inträffade vid läsning av PDF: {e}")
        return pd.DataFrame()

    if not all_rows:
        return pd.DataFrame()

    df = pd.DataFrame(all_rows)
    df = df.drop_duplicates().reset_index(drop=True)
    df = df.sort_values(by=['Km_numeric', 'Källa']).reset_index(drop=True)
    return df


def search_in_data(df, km_input):
    if df is None or df.empty:
        return None
    
    relevanta_rader = df[df['Km_numeric'] <= km_input]
    
    if relevanta_rader.empty:
        return None
    
    return relevanta_rader.iloc[-1]

# ==============================================================================
# FUNKTIONER FÖR BLANKETTER
# ==============================================================================

def skapa_ifyllt_dokument(data):
    """
    Skapar en ifylld PDF baserat på användardata.
    Använder den tomma blanketten som bakgrundsbild.
    """
    pdf = FPDF()
    pdf.add_page()
    try:
        pdf.image("blankett_21_bakgrund.jpg", x=0, y=0, w=210, h=297)
    except RuntimeError:
        pdf.set_font("Helvetica", "B", 16)
        pdf.set_text_color(255, 0, 0)
        pdf.cell(0, 10, "FEL: Bakgrundsbilden 'blankett_21_bakgrund.jpg' kunde inte laddas.", ln=True, align='C')
        return bytes(pdf.output(dest="S"))
      

    pdf.set_font("Helvetica", "", 10)
    pdf.set_text_color(0, 0, 0)

    # --- Placera ut text på exakta X, Y-koordinater (dessa måste justeras) ---
    
    # Grundinformation
    pdf.text(x=167, y=30, txt=data["datum"])
    pdf.text(x=48, y=30, txt=data["tag_spar"])
    pdf.text(x=78, y=38, txt=data["driftplats"])

    # Signaler som får passeras
    signal_y_coords = {
        1: (83.5, 61.3), 2: (83.5, 61.3), 3: (83.5, 61.3), 4: (83.5, 61.3), 5: (83.5, 61.3),
        6: (122.4, 100), 7: (122.4, 100), 8: (122.4, 100), 9: (122.4, 100), 10: (122.4, 100)
    }
    signal_x_coords = {
        1: (44.4, 33.7), 2: (77.4, 68), 3: (113.3, 104.5), 4: (148.3, 138.5), 5: (183.8, 174.5),
        6: (42.2, 33.5), 7: (77.9, 68), 8: (113.2, 104.5), 9: (148.4, 138.5), 10: (183.8, 174.5)
    }

    for i in range(1, 11):
        if data[f"signal_{i}_checked"]:
            pdf.set_font("Helvetica", "B", 12)
            pdf.text(x=signal_x_coords[i][0], y=signal_y_coords[i][0], txt="X")
        if data[f"signal_{i}_name"]:
            pdf.set_font("Helvetica", "", 10)
            pdf.text(x=signal_x_coords[i][1], y=signal_y_coords[i][1], txt=str(data.get(f"signal_{i}_name")))

    # Fortsättning
    if data["forts_fran"]:
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=25.8, y=130.8, txt="X")
    if data["forts_pa"]:
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=109.7, y=130.8, txt="X")

    # Dvärgsignaler & Stopplykta
    pdf.set_font("Helvetica", "", 10)
    pdf.text(x=25.2, y=140, txt=data["vxl_dvarg_antal"])
    pdf.text(x=112.4, y=140, txt=data["stopplykta_antal"])

    # Växlar
    if data["vaxlar_ratt"]:
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=26.04, y=150.09, txt="X")
    if data["kontrollera_vaxlar"]:
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=84.83, y=150.4, txt="X")
    
    # Motväxlar
    y_start = 159
    motvaxel_x_coords = {
        1: (55.5, 80.8), 2: (55.5, 80.8), 3: (55.5, 80.8), 4: (55.5, 80.8), 5: (55.5, 80.8),
        6: (144.8, 170.5), 7: (144.8, 170.5), 8: (144.8, 170.5), 9: (144.8, 170.5), 10: (144.8, 170.5)
    }
    for i in range(1, 11):
        y_pos = y_start + ((i-1) % 5) * 6.2
        x_left, x_right = motvaxel_x_coords[i]
        if data[f"motvaxel_{i}_vanster"]:
            pdf.set_font("Helvetica", "B", 12); pdf.text(x=x_left, y=y_pos, txt="X")
        if data[f"motvaxel_{i}_hoger"]:
            pdf.set_font("Helvetica", "B", 12); pdf.text(x=x_right, y=y_pos, txt="X")

    # Särskilda villkor
    if data["villkor_tsm"]:
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=25.83, y=190.5, txt="X")
    if data["hinder_fardvag"]:
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=25.19, y=199.42, txt="X")
    if data["samtliga_mbsisparr"]:
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=25.4, y=209, txt="X")
    if data["hinder_skydd"]:
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=83.62, y=199.6, txt="X")
        if data["ankomst_checked"]:
            pdf.set_font("Helvetica", "B", 12); pdf.text(x=25.19, y=219.31, txt="X")
            pdf.set_font("Helvetica", "", 10); pdf.text(x=80, y=218, txt=str(data.get("ankomst_plats")))

        if data["brosignal"]:
            pdf.set_font("Helvetica", "B", 12); pdf.text(x=25.83, y=230.32, txt="X")
            pdf.set_font("Helvetica", "", 10); pdf.text(x=45.09, y=229, txt=str(data.get("brosignal_name")))
        if data["skredvarning"]:
            pdf.set_font("Helvetica", "B", 12); pdf.text(x=109.66, y=230.32, txt="X")
            pdf.set_font("Helvetica", "", 10); pdf.text(x=151.15, y=229, txt=str(data.get("skrevrvarning_name")))

    # System M
        pdf.set_font("Helvetica", "", 10); pdf.text(x=71.55, y=244, txt=str(data.get("system_m_plats")))
        if data["system_m_alla"]:
            pdf.set_font("Helvetica", "B", 12); pdf.text(x=25.3, y=253.60, txt="X")
        if data["system_m_foljande"]:
            pdf.set_font("Helvetica", "B", 12); pdf.text(x=75.15, y=253.3, txt="X")
            pdf.set_font("Helvetica", "", 10); pdf.text(x=119.18, y=252, txt=str(data.get("system_m_passera")))
    
        # Footer-information
        pdf.set_font("Helvetica", "", 10)
        pdf.text(x=55, y=268, txt=str(data.get("tillstandsnummer")))
        pdf.text(x=128, y=268, txt=str(data.get("klockslag")))
        pdf.text(x=26, y=281.5, txt=str(data.get("dp_fjbc")))
        pdf.text(x=46, y=281.5, txt=str(data.get("tkl_namn")))
        pdf.text(x=117, y=281.5, txt=str(data.get("forare_namn")))

    result = pdf.output(dest="S")
    return result.encode("latin1")

def skapa_etcs_dokument(data):
    """
    Skapar en ifylld ETCS Samlingsblankett E2/E3 baserat på användardata.
    Använder den tomma blanketten som bakgrundsbild.
    """
    pdf = FPDF()
    pdf.add_page()
    try:
        pdf.image("blankett_etcs_bakgrund.jpg", x=0, y=0, w=210, h=297)
        datum_obj = datetime.strptime(data["datum"], "%Y-%m-%d")
        nytt_datum = datum_obj.strftime("%y     %m     %d")
    except RuntimeError:
        pdf.set_font("Helvetica", "B", 16)
        pdf.set_text_color(255, 0, 0)
        pdf.cell(0, 10, "FEL: Bakgrundsbilden 'blankett_etcs_bakgrund.jpg' kunde inte laddas.", ln=True, align='C')
        return bytes(pdf.output(dest="S"))
    
    pdf.set_font("Helvetica", "", 10)
    pdf.set_text_color(0, 0, 0)

    # A: Grunduppgifter
    pdf.text(x=63.21, y=42, txt=str(data.get("tag_nr")))
    pdf.text(x=124.31, y=42, txt=nytt_datum)
    pdf.text(x=156.9, y=42, txt=str(data.get("klocka_uppe")))
    pdf.text(x=32.53, y=55, txt=str(data.get("vid_plats")))
    pdf.text(x=90, y=55, txt=str(data.get("pa_spar")))
    pdf.text(x=117.5, y=55, txt=str(data.get("fjbc")))

    # 1: Stoppassagemedgivande
    if data["stopp_passagemedgivande_checked"]:
        pdf.set_font("Helvetica", "B", 12); 
        pdf.text(x=25.3, y=67.5, txt="X")
    if data["stopp_passera_checked"]:
        pdf.set_font("Helvetica", "B", 12); 
        pdf.text(x=26.18, y=74.3, txt="X")
    pdf.set_font("Helvetica", "", 10); 
    pdf.text(x=48.40, y=74.04, txt=str(data.get("stopp_passera_km")))
    
    if data["stopp_fram_till_checked"]:
        pdf.set_font("Helvetica", "B", 12); 
        pdf.text(x=26.18, y=82, txt="X")
    pdf.set_font("Helvetica", "", 10); 
    pdf.text(x=52.1, y=81.5, txt=str(data.get("stopp_fram_till_km")))

    if data["stopp_ytterligare_instruktioner_checked"]:
        pdf.set_font("Helvetica", "B", 12); 
        pdf.text(x=26.18, y=90, txt="X")
    pdf.set_font("Helvetica", "", 10)
    pdf.set_xy(x=30.5, y=92.3)
    pdf.multi_cell(w=160, h=7.3, txt=str(data.get("stopp_ytterligare_instruktioner_text")))
    
    pdf.set_font("Helvetica", "B", 12)
    if data["stopp_vaxlar_ratt"]:
        pdf.text(x=37.03, y=112.5, txt="X")
    if data["stopp_kontrollera_vaxlar"]:
        pdf.text(x=37.03, y=119.5, txt="X")

    # Motväxlar
    # Vänster kolumn: 3 vänster + 3 höger (totalt 6 rutor, 3 rader)
    motvaxel_y_start = 127
    motvaxel_y_spacing = 4.5
    motvaxel_x_left = 74    # vänsterläge
    motvaxel_x_right = 99   # högerläge
    
    for i in range(1, 4):  # 1 till 3
        y = motvaxel_y_start + (i-1) * motvaxel_y_spacing
        if data.get(f"motvaxel_{i}_vanster"):
            pdf.text(x=motvaxel_x_left, y=y, txt="X")
        if data.get(f"motvaxel_{i}_hoger"):
            pdf.text(x=motvaxel_x_right, y=y, txt="X")
    
    # Höger kolumn: 2 vänster + 2 höger (totalt 4 rutor, 2 rader)
    motvaxel_x_left2 = 154.28   # vänsterläge höger kolumn
    motvaxel_x_right2 = 178.44  # högerläge höger kolumn
    motvaxel_y_start2 = 127
    
    for i in range(4, 6):  # 4 till 5
        y = motvaxel_y_start2 + (i-4) * motvaxel_y_spacing
        if data.get(f"motvaxel_{i}_vanster"):
            pdf.text(x=motvaxel_x_left2, y=y, txt="X")
        if data.get(f"motvaxel_{i}_hoger"):
            pdf.text(x=motvaxel_x_right2, y=y, txt="X")
            
    if data["stopp_enligt_tsm"]:
        pdf.text(x=127.83, y=135.6, txt="X")

    # 2: Tillstånd att fortsätta efter "Nödstopp"
    if data["nodstopp_02"]: #Avdelning 2
        pdf.set_font("Helvetica", "B", 12); 
        pdf.text(x=25.21, y=144.09, txt="X")
    if data["nodstopp_sarskilt_ansvar"]:
        pdf.text(x=26.1, y=151.5, txt="X")
    if data["nodstopp_skiftning"]:
        pdf.text(x=26.1, y=163, txt="X")
    if data["nodstopp_undersoka_checked"]:
        pdf.text(x=26.1, y=171.5, txt="X")
        pdf.set_font("Helvetica", "", 10); pdf.text(x=91.6, y=170.55, txt=str(data.get("nodstopp_undersoka_skal")))
    if data["nodstopp_rapportera_till_checked"]:
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=26.1, y=180.07, txt="X")
        pdf.set_font("Helvetica", "", 10)
        pdf.text(x=78.1, y=179, txt=str(data.get("nodstopp_rapportera_till")))
        
    if data["nodstopp_ytterligare_instruktioner_checked"]:
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=26.1, y=188.5, txt="X")
        pdf.set_font("Helvetica", "", 10)
        pdf.set_xy(x=36.2, y=191.5)
        pdf.multi_cell(w=160, h=8.2, txt=str(data.get("nodstopp_ytterligare_instruktioner_text")))

    # 3: Order om att stå stilla
    pdf.set_font("Helvetica", "B", 12)
    if data["order_stastilla_03"]:
        pdf.text(x=25.3, y=213.5, txt="X")
    if data["order_sta_stilla"]:
        pdf.text(x=26.1, y=220.8, txt="X")
    if data["order_ytterligare_instruktioner_checked"]:
        pdf.text(x=26.1, y=232.3, txt="X")
        pdf.set_font("Helvetica", "", 10)
        pdf.set_xy(x=30, y=234)
        pdf.multi_cell(w=160, h=7.2, txt=str(data.get("order_ytterligare_instruktioner_text")))

    # Underskrifter
    pdf.set_font("Helvetica", "", 10)
    pdf.text(x=46.73, y=257.49, txt=str(data.get("forare_namn")))
    pdf.text(x=137, y=257.49, txt=str(data.get("utfardare_namn")))
    pdf.text(x=39.7, y=266.5, txt=str(data.get("klockslag")))
    pdf.text(x=132.42, y=266.5, txt=str(data.get("ordernummer")))

    result = pdf.output(dest="S")
    return result.encode("latin1")


def skapa_etcs_baksida_dokument(data):
    """
    Skapar en ifylld ETCS Samlingsblankett E2/E3 (baksida) baserat på användardata.
    """
    pdf = FPDF()
    pdf.add_page()
    
    try:
        pdf.image("blankett_etcs_baksida_bakgrund.jpg", x=0, y=0, w=210, h=297)
        datum_obj = datetime.strptime(data["datum"], "%Y-%m-%d")
        nytt_datum = datum_obj.strftime("%y     %m     %d")
    except RuntimeError:
        pdf.set_font("Helvetica", "B", 16)
        pdf.set_text_color(255, 0, 0)
        pdf.cell(0, 10, "FEL: Bakgrundsbilden 'blankett_etcs_baksida_bakgrund.jpg' kunde inte laddas.", ln=True, align='C')
        return bytes(pdf.output(dest="S"))

    pdf.set_font("Helvetica", "", 10)
    pdf.set_text_color(0, 0, 0)

    # A: Grunduppgifter (samma som framsida)
    pdf.text(x=52.09, y=41, txt=str(data.get("tag_nr")))
    pdf.text(x=112, y=41, txt=nytt_datum)
    pdf.text(x=145.3, y=41, txt=str(data.get("klockslag_uppe")))
    pdf.text(x=20.59, y=53.72, txt=str(data.get("vid_plats")))
    pdf.text(x=78.85, y=53.72, txt=str(data.get("pa_spar")))
    pdf.text(x=106.03, y=53.72, txt=str(data.get("fjbc")))

    # 4: Upphävande av order
    if data.get("upphavande04_checked"):
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=14, y=67.5, txt="X")
    if data.get("upphavande_checked"):
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=15, y=75.54, txt="X")
        pdf.set_font("Helvetica", "", 10); pdf.text(x=32.32, y=75.12, txt=str(data.get("upphavande_ordernr")))
    if data.get("upphavande_ytterligare_checked"):
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=15, y=83.77, txt="X")
        pdf.set_font("Helvetica", "", 10)
        pdf.set_xy(x=54.76, y=78.9)
        pdf.multi_cell(w=134.8, h=7, txt=str(data.get("upphavande_ytterligare_text")))

    # 5: Order om att köra med nedsatt hastighet
    if data.get("nedsatt_hastighet05_checked"):
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=14, y=103.53, txt="X")
    if data.get("nedsatt_hastighet_checked"):
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=15.03, y=111.7, txt="X")
        pdf.set_font("Helvetica", "", 10)
        pdf.text(x=20, y=119.6, txt=str(data.get("nedsatt_hastighet_kmh")))
        pdf.text(x=48.79, y=119.6, txt=str(data.get("nedsatt_hastighet_fran")))
        pdf.text(x=108.71, y=119.6, txt=str(data.get("nedsatt_hastighet_till")))

    if data["nedsatt_undersoka_checked"]:
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=15.03, y=128.23, txt="X")
        pdf.set_font("Helvetica", "", 10)
        pdf.set_xy(x=73.91, y=123)
        pdf.multi_cell(w=115.5, h=7, txt=str(data.get("nedsatt_undersoka_skal")))

    
    if data["nedsatt_rapportera_till_checked"]:
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=15.03, y=144.28, txt="X")
    pdf.set_font("Helvetica", "", 10)
    pdf.text(x=60.32, y=143.4, txt=str(data.get("nedsatt_rapportera_till")))
    
    if data["nedsatt_ytterligare_checked"]:
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=15.03, y=151.48, txt="X")
        pdf.set_font("Helvetica", "", 10)
        pdf.set_xy(x=19.3, y=154)
        pdf.multi_cell(w=150, h=7.2, txt=str(data.get("nedsatt_ytterligare_text")))

    # 7: Tillstånd att starta i driftläge "särskilt ansvar"
    if data.get("sarskilt_ansvar07_checked"):
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=14, y=187.5, txt="X")
    if data.get("sarskilt_ansvar_checked"):
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=14.8, y=200.88, txt="X")

    if data.get("sarskilt_ansvar_passera_checked"):
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=14.9, y=213.5, txt="X")
        pdf.set_font("Helvetica", "", 10); pdf.text(x=34.8, y=212.61, txt=str(data.get("sarskilt_ansvar_passera_text")))

    if data.get("sarskilt_ansvar_ytterligare_checked"):
        pdf.set_font("Helvetica", "B", 12); pdf.text(x=14.9, y=222, txt="X")
        pdf.set_font("Helvetica", "", 10)
        pdf.set_xy(x=19.35, y=223.6)
        pdf.multi_cell(w=150, h=7.2, txt=str(data.get("sarskilt_ansvar_ytterligare_text")))

    # Underskrifter
    pdf.set_font("Helvetica", "", 10)
    pdf.text(x=35.41, y=254.6, txt=str(data.get("forare_namn")))
    pdf.text(x=125.79, y=254.6, txt=str(data.get("utstardare_namn")))
    pdf.text(x=29.03, y=264.07, txt=str(data.get("klockslag")))
    pdf.text(x=120.85, y=264.07, txt=str(data.get("ordernummer")))

    result = pdf.output(dest="S")
    return result.encode("latin1")

# ==============================================================================
# STREAMLIT-APPLIKATIONENS UTSEENDE (UI)
# ==============================================================================

if 'page' not in st.session_state:
    st.session_state.page = 'main'

def go_to_main(): st.session_state.page = 'main'
def go_to_svenska(): st.session_state.page = 'svenska'
def go_to_norska(): st.session_state.page = 'norska'
def go_to_linjebocker(): st.session_state.page = 'linjebocker'
def go_to_blanketter_menu(): st.session_state.page = 'blanketter_menu'
def go_to_blankett_21(): st.session_state.page = 'blankett_21'
def go_to_blankett_etcs(): st.session_state.page = 'blankett_etcs'
def go_to_blankett_etcs_baksida(): st.session_state.page = 'blankett_etcs_baksida'


def render_main_page():
    st.markdown("<h1 style='text-align: center;'>🚂 Tågdata</h1>", unsafe_allow_html=True)
    st.markdown('<h3 style="text-align: center;">Välj verktyg</h3>', unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.button("Bromsprocent Sverige", on_click=go_to_svenska, use_container_width=True)
    with col2:
        st.button("Bremsetabeller Norge", on_click=go_to_norska, use_container_width=True)
    with col3: 
        st.button("Linjebeskrivningar", on_click=go_to_linjebocker, use_container_width=True)
    with col4:
        st.button("Blanketter Sverige", on_click=go_to_blanketter_menu, use_container_width=True)
        
    st.markdown("<h6 style='text-align: center; position: fixed; bottom: 10px; width: 100%;'>Utvecklad av SH. Vid fel eller förslag, maila <a href='mailto:sh@onrail.no'>sh@onrail.no</a></h6>",
    unsafe_allow_html=True)

def render_svenska_page():
    st.button("⬅️ Tillbaka till huvudmenyn", on_click=go_to_main)
    st.markdown("<h1 style='text-align: center;'>Svenska Bromsprocenttabellen</h1>", unsafe_allow_html=True)
    st.write("Ange tåglängd och bromsprocent för att se högsta tillåtna hastighet på **samtliga** svenska bandelar.")
    
    @st.dialog("Översiktskarta")
    def visa_karta_dialog():
        st.subheader("Karta över bandelar A, B, C, D, D+, E och EM")
        try:
            st.image("Karta.jpg")
        except Exception:
            st.warning("Bilden 'Karta.jpg' kunde inte hittas.")

    if st.button("🗺️ Visa översiktskarta över svenska bandelar"):
        visa_karta_dialog()
    
    kol1, kol2 = st.columns(2)
    with kol1:
        tåglängd_inmatad = st.number_input(
            'Ange tåglängd (meter):', min_value=0, max_value=1500, value=350, step=10,
            help="Ange tågets totala längd i meter."
        )
    with kol2:
        bromsprocent_inmatad_tab1 = st.number_input(
            'Ange tillgänglig bromsprocent:', min_value=0, max_value=200, value=100, step=1,
            help="Ange den tillgängliga bromsprocenten för tågsättet.", key='broms_tab1'
        )

    if st.button('Hitta högsta tillåtna hastighet', key='button_tab1'):
        hastighets_resultat = {}
        for bana in HASTIGHETS_DATA.keys():
            resultat = hitta_max_hastighet(bana, tåglängd_inmatad, bromsprocent_inmatad_tab1)
            hastighets_resultat[bana] = resultat
        
        st.subheader("Sammanfattning")
        
        giltiga_resultat = {
            bana: hastighet
            for bana, hastighet in hastighets_resultat.items()
            if isinstance(hastighet, int)
        }
        
        if giltiga_resultat:
            bana_med_lagst_hastighet = min(giltiga_resultat, key=giltiga_resultat.get)
            lagsta_hastighet = giltiga_resultat[bana_med_lagst_hastighet]
            
            st.metric(
                label=f"LÄGSTA GÄLLANDE HASTIGHET (FRÅN BANA {bana_med_lagst_hastighet})",
                value=f"{lagsta_hastighet} km/h"
            )
            st.success(f"För ett tåg på {tåglängd_inmatad}m med {bromsprocent_inmatad_tab1}% broms är detta den mest restriktiva hastighet.")
        else:
            st.warning("Inga giltiga hastigheter kunde beräknas för angivna värden.")

        st.divider()
        
        st.subheader("Detaljerat resultat per bana")
        
        KOLUMNER_PER_RAD = 4
        items = list(hastighets_resultat.items())

        for i in range(0, len(items), KOLUMNER_PER_RAD):
            chunk = items[i:i + KOLUMNER_PER_RAD]
            
            cols = st.columns(len(chunk))
            
            for j, (bana, hastighet) in enumerate(chunk):
                with cols[j]:
                    if isinstance(hastighet, int):
                        st.metric(label=f"Bana {bana}", value=f"{hastighet} km/h")
                    else:
                        st.metric(label=f"Bana {bana}", value="-")
                        st.caption(hastighet)

    st.info("Observera: Data är tolkad från Bromstabeller A,B,C,D, D+, E & EM. Dubbelkolla alltid mot officiella källor vid faktisk operativ användning.")

def render_norska_page():
    st.button("⬅️ Tillbaka till huvudmenyn", on_click=go_to_main)
    st.markdown("<h1 style='text-align: center;'>Norska Bremsetabeller</h1>", unsafe_allow_html=True)
    st.write("Ange bestämmande fall och bromsprocent för att se tillåten hastighet enligt varje tabell.")
    
    col1_tab2, col2_tab2 = st.columns(2)
    with col1_tab2:
        fall_inmatad = st.number_input(
            'Ange bestämmande fall (‰):', min_value=0, value=10, step=1,
            help="Ange den största medellutningen i promille."
        )
    with col2_tab2:
        bremseprosent_inmatad_tab2 = st.number_input(
            'Ange tillgänglig bromsprocent (%):', min_value=0, max_value=200, value=100, step=1,
            key='broms_tab2'
        )

    if st.button('Beräkna hastighet', key='button_tab2'):
        resultat_per_tabell = hitta_norska_hastigheter(fall_inmatad, bremseprosent_inmatad_tab2)
        
        st.subheader("Resultat per tabell")
        st.info(f"Resultat för bestämmande fall {fall_inmatad}‰ och {bremseprosent_inmatad_tab2}% broms.")

        cols = st.columns(4)
        for i, (tabell_namn, hastighet) in enumerate(resultat_per_tabell.items()):
            with cols[i]:
                if isinstance(hastighet, int):
                    st.metric(label=tabell_namn, value=f"{hastighet} km/h")
                    if tabell_namn in ["Tabell II", "Tabell III", "Tabell IV"] and 1 <= fall_inmatad <= 3:
                        st.caption(f"Använder data för 4‰")
                else:
                    st.metric(label=tabell_namn, value="-")
                    st.caption(hastighet)
    
    st.info("""
    **Observera:** * Data är tolkad från Bremsetabell I, II, III och IV. Dubbelkolla alltid mot officiella källor.
    * För tabell II, III och IV används data för 4‰ fall om det angivna fallet är 1, 2 eller 3‰.
    """)

def render_linjebocker_page():
    st.button("⬅️ Tillbaka till huvudmenyn", on_click=go_to_main)
    st.header("Sök i Linjebeskrivning")
    linjebocker = {
        "Katrineholm - Laxå - Hallsberg - Skövde": "007_katrineholms_central_till_skovde_central_250601.pdf",
        "Skövde - Hallsberg - Laxå - Katrineholm": "045_skovde_central_till_katrineholms_central_250601.pdf",
        "Laxå - Kil - Charlottenberg": "083_laxa_till_charlottenberg_250601.pdf",
        "Charlottenberg - Kil - Laxå": "111_charlottenberg_till_laxa_250601.pdf",
        "Ljusdal - Storvik - Avesta Krylbo - Frövi ": "115_ljusdal_till_frovi.pdf",
        "Frövi - Avesta Krylbo - Storvik - Ljusdal": "167_frovi_till_ljusdal.pdf",
        "Kil - Ställdalen": "365_kil_till_stalldalen_250601.pdf",
        "Ställdalen - Kil": "345_stalldalen_till_kil_250601.pdf",
        "Frövi - Borlänge": "209_frovi_till_domnarvet_250601.pdf",
        "Borlänge - Frövi": "181_domnarvet_till_frovi_250601.pdf",
        "Hallsberg - Frövi": "161_hallsbergs_rangerbangard_till_frovi_250601.pdf",
        "Frövi - Hallsberg": "141_frovi_till_hallsbergs_rangerbangard_250601.pdf",
        "Borlänge - Storvik": "315_borlange_central_till_fliskar_250601.pdf",
        "Storvik - Borlänge": "283_fliskar_till_borlange_central_250601.pdf",
        "Ånge - Ljusdal": "095_ange_till_ljusdal_250601.pdf",
        "Ljusdal - Ånge": "117_ljusdal_till_ange_250601.pdf",
        "Ånge - Vännäs": "045_ange_till_vannas_250601.pdf",
        "Vännäs - Ånge": "005_vannas_till_ange_250601.pdf",
        "Ånge - Sundsvall": "139_ange_till_sundsvalls_central_250601.pdf",
        "Sundsvall - Ånge": "161_sundsvalls_central_till_ange_250601.pdf",
        "Sundsvall - Gimonäs E2": "321_sundsvalls_central_till_gimonas_250601.pdf",
        "Gimonäs - Sundsvall E2": "267_gimonas_till_sundsvalls_central_250601.pdf",
        "Boden Central - Vännäs": "265_bodens_central_till_vannas_250505.pdf",
        "Vännäs - Boden Central": "301_vannas_till_bodens_central_250505.pdf",
        "Luleå - Björnfjell": "071_lulea_till_bjornfjell_250601.pdf",
        "Björnfjell - Luleå": "005_bjornfjell_till_lulea_250601.pdf",
    }
    
    vald_linjebok_namn = st.selectbox("Välj linjebeskrivning:", list(linjebocker.keys()))
    vald_fil = linjebocker[vald_linjebok_namn]

    try:
        df = load_pdf_data(vald_fil)
        
        if isinstance(df, pd.DataFrame) and not df.empty:
            with st.expander("Visa inläst rådata från PDF för felsökning"):
                st.dataframe(df)

            search_query = st.text_input(
                "Sök på kilometer (t.ex. 258 eller 1152.3) eller ord (t.ex. 'signal'):",
                placeholder="Skriv här..."
            )

            if st.button("Sök i linjebok"):
                if search_query:
                    is_km_search = False
                    km_value = 0.0
                    try:
                        km_value = float(search_query.replace(',', '.'))
                        is_km_search = True
                    except ValueError:
                        is_km_search = False

                    st.divider()

                    if is_km_search:
                        if km_value == int(km_value):
                            start_km = int(km_value)
                            end_km = start_km + 0.999
                            st.subheader(f"Resultat för kilometer {start_km}")
                            results_df = df[(df['Km_numeric'] >= start_km) & (df['Km_numeric'] <= end_km)]
                        else:
                            st.subheader(f"Resultat för km {km_value}")
                            results_df = pd.DataFrame()
                            närmaste_rad = search_in_data(df, km_value)
                            if närmaste_rad is not None:
                                results_df = pd.DataFrame([närmaste_rad])
                        
                        if not results_df.empty:
                            st.write(f"Hittade {len(results_df)} träff(ar).")
                            for index, row in results_df.iterrows():
                                st.markdown(f"--- \n**Vid km:** `{row['Km_str']}` (Sth: {row['Sth']})")
                                st.info(f"**Sträcka:** {row['Sträcka/System']}")
                                st.code(row['Information'], language=None)
                        else:
                            st.warning(f"Inga träffar för kilometer {search_query}.")
                    else:
                        st.subheader(f"Resultat för sökordet '{search_query}'")
                        results_df = df[df['Information'].str.contains(search_query, case=False, na=False, regex=False)]
                        
                        if not results_df.empty:
                            st.write(f"Hittade {len(results_df)} träff(ar):")
                            for index, row in results_df.iterrows():
                                st.markdown(f"--- \n**Vid km:** `{row['Km_str']}` (Sth: {row['Sth']})")
                                st.info(f"**Sträcka:** {row['Sträcka/System']}")
                                
                                try:
                                    pattern = re.compile(re.escape(search_query), re.IGNORECASE)
                                    highlighted_info = pattern.sub(f"**{search_query.upper()}**", row['Information'])
                                    st.markdown(highlighted_info)
                                except re.error:
                                    st.code(row['Information'], language=None)
                        else:
                            st.warning(f"Inga träffar för ordet '{search_query}'.")

        elif isinstance(df, pd.DataFrame) and df.empty:
            st.error("Kunde inte extrahera någon läsbar data från den valda PDF-filen.")
            
    except FileNotFoundError:
        st.error(f"FEL: Filen '{vald_fil}' kunde inte hittas. Se till att den ligger i samma mapp som appen.")
    except Exception as e:
        st.error(f"Ett oväntat fel inträffade: {e}")

# ==============================================================================
# SIDOR FÖR BLANKETTER
# ==============================================================================
def render_blanketter_menu_page():
    """Visar en meny för att välja vilken blankett som ska fyllas i."""
    st.button("⬅️ Tillbaka till huvudmenyn", on_click=go_to_main)
    st.markdown("<h2 style='text-align: center;'>Svenska Blanketter</h2>", unsafe_allow_html=True)
    st.write("Välj en blankett nedan för att börja fylla i den.")
    
    st.button("📝 Blankett 21: Passage av signal i stopp", on_click=go_to_blankett_21)
    st.button("📝 ETCS Samlingsblankett (E2/E3) - Framsida", on_click=go_to_blankett_etcs, disabled= False)
    st.button("📝 ETCS Samlingsblankett (E2/E3) - Baksida" , on_click=go_to_blankett_etcs_baksida, disabled= False)


def render_blankett_21_page():
    """Renderar formuläret för att fylla i Blankett 21."""
    st.button("⬅️ Tillbaka till blankettmenyn", on_click=go_to_blanketter_menu)
    st.title("Fylla i blankett 21: Passage av signal i 'stopp'")
    st.info("Fyll i fälten nedan. När du är klar, klicka på knappen längst ner för att skapa en ifylld PDF.")

    with st.form("blankett_21_form"):
        st.header("Grundinformation")
        col1_form, col2_form = st.columns(2)
        with col1_form:
            datum_input = st.date_input("Datum", value=datetime.now())
        with col2_form:
            tag_spar_input = st.text_input("Tåg/Spärrfärd", placeholder="Ange Tågnummer eller spärrfärd")
        
        driftplats_input = st.text_input("Driftplats/driftplatsdel eller sträcka", placeholder="Ange driftplats, driftplatsdel eller sträcka...")

        st.header("Signaler som får passeras")
        st.caption("Ange signalens namn. Kryssa i rutan efter att signalen har passerats i verkligheten.")

        signal_data = {}
        signal_types = ["infsi/msi", "ublsi", "mblsi", "mblsi", "mblsi", "utfsi", "mblsi", "mblsi", "mblsi", "mblsi"]
        for i, sig_type in enumerate(signal_types, 1):
            col1, col2 = st.columns([3, 1])
            with col1:
                signal_data[f"signal_{i}_name"] = st.text_input(f"Namn för {sig_type}", key=f"sig_name_{i}", label_visibility="collapsed", placeholder=f"Namn på {sig_type}...")
            with col2:
                signal_data[f"signal_{i}_checked"] = st.checkbox(sig_type, key=f"sig_check_{i}")

        st.header("Övriga uppgifter")
        col1, col2 = st.columns(2)
        with col1:
            forts_fran_checked = st.checkbox("Fortsättning från föregående blankett")
        with col2:
            forts_pa_checked = st.checkbox("Fortsätter på nästa blankett")

        vxl_dvarg_antal_input = st.text_input("Växlingsdvärgsignaler får passeras i 'stopp':", key="vxl_antal", placeholder="Antal...")
        stopplykta_antal_input = st.text_input("Stopplyktor får passeras i 'stopp':", key="stopp_antal", placeholder="Antal...")
            
        st.header("Växlar")
        vaxlar_ratt_checked = st.checkbox("Växlarna ligger rätt")
        kontrollera_vaxlar_checked = st.checkbox("Kontrollera växlarna", key="vaxlar_kontrollera")

        motvaxel_data = {}
        motvaxel_labels = [
            "Första motväxel i", "Andra motväxel i", "Tredje motväxel i", 
            "Fjärde motväxel i", "Femte motväxel i", "Sjätte motväxel i", 
            "Sjunde motväxel i", "Åttonde motväxel i", "Nionde motväxel i", 
            "Tionde motväxel i"
        ]
        for i, label in enumerate(motvaxel_labels, 1):
            cols = st.columns([2, 1, 1])
            cols[0].write(label)
            motvaxel_data[f"motvaxel_{i}_vanster"] = cols[1].checkbox("Vänster", key=f"vx{i}_v")
            motvaxel_data[f"motvaxel_{i}_hoger"] = cols[2].checkbox("Höger", key=f"vx{i}_h")

        st.header("Särskilda villkor och anmälan")
        villkor_tsm_checked = st.checkbox("Enligt villkor från tsm/htsm")
        hinder_fardvag_checked = st.checkbox("Hinder i tågfärdvägen")
        hinder_skydd_checked = st.checkbox("Hinder på tågfärdvägens skyddssträcka")
        passera_samtliga_mbsisparr_checked = st.checkbox("Samtliga mellanblocksignaler på spärrfärdssträckan får passeras")
        
        col1, col2 = st.columns([3, 2])
        with col1:
            ankomst_checked = st.checkbox("Ankomstanmälan ska lämnas vid")
        with col2:
            ankomst_plats_input = st.text_input("Trafikplats", key="ankomst_plats", label_visibility="collapsed", placeholder="Ankomstanmälan vid...")
            
        col1, col2 = st.columns([3, 2])
        with col1:
            brosignal_checked = st.checkbox("Brosignal får passeras")
        with col2:
            brosignal_name_input = st.text_input("Namn på brosignal", key="brosignal_namn", label_visibility="collapsed", placeholder="Namn på brosignal...")

        col1, col2 = st.columns([3, 2])
        with col1:
            skredvarning_checked = st.checkbox("Skredvarningsstopplykta får passeras")
        with col2:
            skredvarning_namn_input = st.text_input("Namn på skredvarningsstopplykta", key="skredvarning_namn", label_visibility="collapsed", placeholder="Namn på skredvarningsstopplykta...")
        
        st.header("System M")
        system_m_plats_input = st.text_input("Vid den obevakade driftplatsen", placeholder="Ange driftplats...")
        system_m_alla_checked = st.checkbox("Alla signaler passeras", key="system_m_alla")
        
        col_sm1, col_sm2 = st.columns(2)
        with col_sm1:
            system_m_foljande_checked = st.checkbox("Följande signaler passeras", key="system_m_foljande")
        with col_sm2:
            system_m_passera_input = st.text_input("Signal som passeras", key="system_m_passera", label_visibility="collapsed", placeholder="Namn på signal...")
        
        st.header("Underskrifter")
        tillstandsnummer_input = st.text_input("Tillståndsnummer")
        klockslag_input = st.text_input("Klockslag")
        dp_fjbc_input = st.text_input("Dp/fjbc")
        tkl_namn_input = st.text_input("Tågklarerare (namn)")
        forare_namn_input = st.text_input("Förare/tillsyningsman (namn)")

        submitted = st.form_submit_button("Skapa ifylld blankett 21")

    if submitted:
        form_data = {
            "datum": datum_input.strftime("%Y-%m-%d"), "tag_spar": tag_spar_input,
            "driftplats": driftplats_input, "forts_fran": forts_fran_checked,
            "forts_pa": forts_pa_checked, "vxl_dvarg_antal": vxl_dvarg_antal_input,
            "stopplykta_antal": stopplykta_antal_input, "vaxlar_ratt": vaxlar_ratt_checked,
            "kontrollera_vaxlar": kontrollera_vaxlar_checked, "villkor_tsm": villkor_tsm_checked,
            "hinder_fardvag": hinder_fardvag_checked, "hinder_skydd": hinder_skydd_checked,
            "ankomst_checked": ankomst_checked, "ankomst_plats": ankomst_plats_input,
            "brosignal": brosignal_checked, "brosignal_name": brosignal_name_input,
            "skredvarning": skredvarning_checked, "skrevrvarning_name": skredvarning_namn_input,
            "system_m_plats": system_m_plats_input, "system_m_foljande": system_m_foljande_checked,
            "system_m_passera": system_m_passera_input, "system_m_alla": system_m_alla_checked,
            "tillstandsnummer": tillstandsnummer_input, "klockslag": klockslag_input,
            "dp_fjbc": dp_fjbc_input, "tkl_namn": tkl_namn_input, "forare_namn": forare_namn_input,
            "samtliga_mbsisparr": passera_samtliga_mbsisparr_checked,
        }
        form_data.update(signal_data)
        form_data.update(motvaxel_data)
        
        pdf_bytes = skapa_ifyllt_dokument(form_data)
        
        st.success("PDF-blanketten har skapats!")
        
        st.download_button(
            label="Ladda ner ifylld blankett 21",
            data=pdf_bytes,
            file_name = f"ifylld_blankett_21_{form_data['tag_spar']}_{form_data['datum']}.pdf",
            mime="application/pdf",
        )

def render_blankett_etcs_page():
    """Renderar formuläret för att fylla i ETCS Samlingsblankett."""
    st.button("⬅️ Tillbaka till blankettmenyn", on_click=go_to_blanketter_menu)
    st.title("Fylla i ETCS Samlingsblankett (E2/E3) - Framsida")
    st.info("Fyll i fälten nedan för de avsnitt som är relevanta. Klicka sedan på knappen längst ner för att skapa en ifylld PDF.")

    with st.form("blankett_etcs_form"):
        st.header("A: Grunduppgifter")
        col1, col2 = st.columns(2)
        with col1:
            tag_nr_input = st.text_input("Tåg/spärrfärd/växling nr", placeholder="Ange Tågnummer,spärrfärd, växlings nr..")
        with col2:
            datum_input = st.date_input("Datum")
            klocka_input = st.text_input("Klockslag", placeholder="Ange klockslag (HH MM)")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            vid_plats_input = st.text_input("Vid (driftplats)", placeholder="Ange Driftplats...")
        with col2:
            pa_spar_input = st.text_input("På spår", placeholder= "Ange Spår...")
        with col3:
            fjbc_input = st.text_input("Fjbc", placeholder="Ange Fjbc...")

        st.header("1: Stoppassagemedgivande")
        stopp_passagemedgivande_checked = st.checkbox("Avdelning 01: Stoppassagemedgivande")
        stopp_passera_checked = st.checkbox("Får passera EOA (och har körtillstånd / tillstånd att fortsätta)", key="stopp_passera")
        stopp_passera_km_input = st.text_input("Vid km/tavla/signal", key="stopp_passera_km", help="Stryk den text som inte gäller i parentesen (exempel km/tavla/signal).", placeholder="Ange Km/Tavla/Signal")
        
        stopp_fram_till_checked = st.checkbox("Får gå fram till (och har körtillstånd dit / tillstånd att fortsätta dit)", key="stopp_fram_till")
        stopp_fram_till_km_input = st.text_input("Vid km/tavla/signal", key="stopp_fram_till_km", help="Stryk den text som inte gäller i parentesen (exempel km/tavla/signal).", placeholder="Ange Km/Tavla/Signal")

        stopp_ytterligare_instruktioner_checked = st.checkbox("Ytterligare instruktioner", key="stopp_ytterligare")
        stopp_ytterligare_instruktioner_text_input = st.text_area("Instruktioner (text)", key="stopp_ytterligare_text", placeholder="Ange ytterligare instruktioner")

        st.write("Växlar:")
        stopp_vaxlar_ratt_checked = st.checkbox("Växlar ligger rätt")
        stopp_kontrollera_vaxlar_checked = st.checkbox("Kontrollera växlarna")

        motvaxel_data = {}
        st.write("Motväxlar:")
        motvaxel_labels = ["Första", "Andra", "Tredje", "Fjärde", "Femte"]
        for i, label in enumerate(motvaxel_labels, 1):
            cols = st.columns([2, 1, 1])
            cols[0].write(f"{label} motväxel i")
            motvaxel_data[f"motvaxel_{i}_vanster"] = cols[1].checkbox("vänsterläge", key=f"etcs_vx{i}_v")
            motvaxel_data[f"motvaxel_{i}_hoger"] = cols[2].checkbox("högerläge", key=f"etcs_vx{i}_h")

        stopp_enligt_tsm_checked = st.checkbox("Enligt besked från tsm/htsm")

        st.header("2: Tillstånd att fortsätta efter driftläge 'Nödstopp'")
        nodstopp_02_checked = st.checkbox("Avdelning 02: Tillstånd att fortsätta efter driftläge 'Nödstopp'")
        nodstopp_sarskilt_ansvar_checked = st.checkbox("Har tillstånd att starta i driftläge 'särkilt ansvar' " \
        "om inget tekniskt körbesked tas emot (och har körtillstånd / tillstånd att fortsätta till den närmaste signalpunktstavlan).")
        nodstopp_skiftning_checked = st.checkbox("Får välja driftläge 'skiftning'")
        nodstopp_undersoka_checked = st.checkbox("Ska undersöka banan av följande skäl")
        nodstopp_undersoka_skal_input = st.text_input("Skäl för undersökning", placeholder="Ange skäl för undersökning")
        nodstopp_rapportera_till_checked = st.checkbox("Ska rapportera resultatet till", key="nodstopp_rapportera_till")
        nodstopp_rapportera_till_input = st.text_input("Ska rapportera resultatet till", placeholder="Ange rapportera resultatet till")
        nodstopp_ytterligare_instruktioner_checked = st.checkbox("Ytterligare instruktioner", key="nodstopp_ytterligare")
        nodstopp_ytterligare_instruktioner_text_input = st.text_area("Instruktioner (text)", key="nodstopp_ytterligare_text", placeholder="Ange ytterligare instruktioner")
        
        st.header("3: Order om att stå stilla")
        order_stastilla_03_checked = st.checkbox("Avdelning 03: Order om att stå stilla")
        order_sta_stilla_checked = st.checkbox("Förbli stående vid nuvarande position")
        order_ytterligare_instruktioner_checked = st.checkbox("Ytterligare instruktioner", key="order_ytterligare")
        order_ytterligare_instruktioner_text_input = st.text_area("Instruktioner (text)", key="order_ytterligare_text", placeholder="Ange ytterligare instruktioner")
        
        st.header("Underskrifter")
        col_u1, col_u2 = st.columns(2)
        with col_u1:
            forare_namn_input = st.text_input("Förare (namn)", key="etcs_forare")
            utfardare_namn_input = st.text_input("Utfärdare (namn)", key="etcs_utfardare")
        with col_u2:
            klockslag_input = st.text_input("Klockslag", key="etcs_klock")
            ordernummer_input = st.text_input("Ordernummer", key="etcs_order")

        submitted = st.form_submit_button("Skapa ifylld ETCS-blankett (Framsida)")

    if submitted:
        form_data = {
            "tag_nr": tag_nr_input, "datum": datum_input.strftime("%Y-%m-%d"), "klocka_uppe":klocka_input,
            "vid_plats": vid_plats_input, "pa_spar": pa_spar_input, "fjbc": fjbc_input,
            "stopp_passera_checked": stopp_passera_checked, "stopp_passera_km": stopp_passera_km_input,
            "stopp_fram_till_checked": stopp_fram_till_checked, "stopp_fram_till_km": stopp_fram_till_km_input,
            "stopp_ytterligare_instruktioner_checked": stopp_ytterligare_instruktioner_checked,
            "stopp_ytterligare_instruktioner_text": stopp_ytterligare_instruktioner_text_input,
            "stopp_vaxlar_ratt": stopp_vaxlar_ratt_checked, "stopp_kontrollera_vaxlar": stopp_kontrollera_vaxlar_checked,
            "stopp_enligt_tsm": stopp_enligt_tsm_checked, "nodstopp_sarskilt_ansvar": nodstopp_sarskilt_ansvar_checked,
            "nodstopp_02": nodstopp_02_checked,
            "nodstopp_skiftning": nodstopp_skiftning_checked, "nodstopp_undersoka_checked": nodstopp_undersoka_checked,
            "nodstopp_undersoka_skal": nodstopp_undersoka_skal_input, "nodstopp_rapportera_till": nodstopp_rapportera_till_input, 
            "nodstopp_rapportera_till_checked": nodstopp_rapportera_till_checked,
            "nodstopp_ytterligare_instruktioner_checked": nodstopp_ytterligare_instruktioner_checked,
            "nodstopp_ytterligare_instruktioner_text": nodstopp_ytterligare_instruktioner_text_input,
            "order_stastilla_03": order_stastilla_03_checked,
            "order_sta_stilla": order_sta_stilla_checked, "order_ytterligare_instruktioner_checked": order_ytterligare_instruktioner_checked,
            "order_ytterligare_instruktioner_text": order_ytterligare_instruktioner_text_input,
            "forare_namn": forare_namn_input, "utfardare_namn": utfardare_namn_input,
            "klockslag": klockslag_input, "ordernummer": ordernummer_input,
            "stopp_passagemedgivande_checked": stopp_passagemedgivande_checked
        }
        form_data.update(motvaxel_data)
        
        pdf_bytes = skapa_etcs_dokument(form_data)
        
        st.success("PDF-blanketten har skapats!")
        
        st.download_button(
            label="Ladda ner ifylld ETCS-blankett (Framsida)",
            data=pdf_bytes,
            file_name=f"ifylld_ETCS_Samlingsblankett_framsida_{form_data['tag_nr']}_{form_data['datum']}.pdf",
            mime="application/pdf",
        )

def render_blankett_etcs_baksida_page():
    """Renderar formuläret för att fylla i ETCS Samlingsblankett (baksida)."""
    st.button("⬅️ Tillbaka till blankettmenyn", on_click=go_to_blanketter_menu)
    st.title("Fylla i ETCS Samlingsblankett (E2/E3) - Baksida")
    st.info("Fyll i fälten nedan. De avsnitt som inte fylls i kommer lämnas tomma på den genererade PDF:en.")

    with st.form("blankett_etcs_baksida_form"):
        st.header("A: Grunduppgifter")
        col1, col2 = st.columns(2)
        with col1:
            tag_nr_input = st.text_input("Tåg/spärrfärd/växling nr", placeholder="Ange Tågnummer,spärrfärd, växlings nr..")
        with col2:
            datum_input = st.date_input("Datum")
            klocka_input = st.text_input("Klockslag", placeholder="Ange klockslag (HH MM)")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            vid_plats_input = st.text_input("Vid (driftplats)", placeholder="Ange driftplats")
        with col2:
            pa_spar_input = st.text_input("På spår", placeholder="Ange spår")
        with col3:
            fjbc_input = st.text_input("Fjbc", placeholder="Ange Fjbc")

        st.header("4. Upphävande av order")
        upphavande04_checked = st.checkbox("Avdelning 04: Upphävande av order")
        upphavande_checked = st.checkbox("Upphäv order", key="upphavande_check")
        upphavande_ordernr_input = st.text_input("Order nr som ska upphävas", key="upphavande_ordernr", placeholder="Ange ordernummer som ska upphävas")
        upphavande_ytterligare_checked = st.checkbox("Ytterligare instruktioner (för upphävande)", key="upphavande_ytterligare")
        upphavande_ytterligare_text_input = st.text_area("Instruktioner", key="upphavande_text", placeholder="Ange ytterliggare instruktioner för upphävande")

        st.header("5. Order om att köra med nedsatt hastighet")
        nedsatt_hastighet05_checked = st.checkbox("Avdelning 05: Order om att köra med nedsatt hastighet")
        nedsatt_hastighet_checked = st.checkbox("Får köra med högsta hastighet", key="nedsatt_check")
        col_ns1, col_ns2, col_ns3 = st.columns(3)
        with col_ns1:
            nedsatt_hastighet_kmh_input = st.text_input("km/tim", key="nedsatt_kmh", placeholder="Ange hastighet i km/tim")
        with col_ns2:
            nedsatt_hastighet_fran_input = st.text_input("från (km/plats)", key="nedsatt_fran", placeholder="Ange från (km/plats)")
        with col_ns3:
            nedsatt_hastighet_till_input = st.text_input("till (km/plats)", key="nedsatt_till", placeholder="Ange till (km/plats)")

        nedsatt_undersoka_checked = st.checkbox("Ska undersöka banan av följade skäl", key="nedsatt_undersoka_check")
        nedsatt_undersoka_skal_input = st.text_input("Skall undersöka", placeholder="Ange skäl för undersökning")
        nedsatt_rapportera_till_checked = st.checkbox("Ska rapportera resultatet till", key="nedsatt_rapportera_till_check")
        nedsatt_rapportera_till_input = st.text_input("Ska rapportera resultatet till", placeholder="Ange rapportera resultatet till")

        nedsatt_ytterligare_checked = st.checkbox("Ytterligare instruktioner (för nedsatt hastighet)", key="nedsatt_ytterligare")
        nedsatt_ytterligare_text_input = st.text_area("Instruktioner", key="nedsatt_text", placeholder="Ange ytterligare instruktioner för nedsatt hastighet")
        
        st.header("7. Tillstånd att starta i driftläge 'särskilt ansvar'")
        sarskilt_ansvar07_checked = st.checkbox("Avdelning 07: Tillstånd att starta i driftläge 'särskilt ansvar'")
        sarskilt_ansvar_checked = st.checkbox("Har tillstånd att starta i driftläge 'särskilt ansvar' efter aktivering")
        
        sarskilt_ansvar_passera_checked = st.checkbox("Får passera", key="sa_passera_check")
        sarskilt_ansvar_passera_text_input = st.text_input("... (km/tavla/signal)", key="sa_passera_text", placeholder="Ange (km/tavla/signal)")

        sarskilt_ansvar_ytterligare_checked = st.checkbox("Ytterligare instruktioner (för särskilt ansvar)", key="sa_ytterligare")
        sarskilt_ansvar_ytterligare_text_input = st.text_area("Instruktioner", key="sa_text", placeholder="Ange ytterligare instruktioner för särskilt ansvar")

        st.header("Underskrifter")
        col_u1, col_u2 = st.columns(2)
        with col_u1:
            forare_namn_input = st.text_input("Förare (namn)", key="baksida_forare", placeholder="Ange förarens namn")
            utstardare_namn_input = st.text_input("Utfärdare (namn)", key="baksida_utfardare", placeholder="Ange utfärdarens namn")
        with col_u2:
            klockslag_input = st.text_input("Klockslag", key="baksida_klock", placeholder="Ange klockslag")
            ordernummer_input = st.text_input("Ordernummer", key="baksida_order", placeholder="Ange ordernummer")

        submitted = st.form_submit_button("Skapa ifylld ETCS-blankett (Baksida)")

    if submitted:
        form_data = {
            "tag_nr": tag_nr_input, "datum": datum_input.strftime("%Y-%m-%d"), "klockslag_uppe": klocka_input,
            "vid_plats": vid_plats_input, "pa_spar": pa_spar_input, "fjbc": fjbc_input,
            "upphavande04_checked": upphavande04_checked, "upphavande_checked": upphavande_checked, "upphavande_ordernr": upphavande_ordernr_input,
            "upphavande_ytterligare_checked": upphavande_ytterligare_checked, "upphavande_ytterligare_text": upphavande_ytterligare_text_input,
            "nedsatt_hastighet05_checked": nedsatt_hastighet05_checked, "nedsatt_hastighet_checked": nedsatt_hastighet_checked, "nedsatt_hastighet_kmh": nedsatt_hastighet_kmh_input,
            "nedsatt_hastighet_fran": nedsatt_hastighet_fran_input, "nedsatt_hastighet_till": nedsatt_hastighet_till_input,
            "nedsatt_undersoka_checked": nedsatt_undersoka_checked, "nedsatt_undersoka_skal": nedsatt_undersoka_skal_input, 
            "nedsatt_rapportera_till_checked": nedsatt_rapportera_till_checked, "nedsatt_rapportera_till": nedsatt_rapportera_till_input, "nedsatt_ytterligare_checked": nedsatt_ytterligare_checked,
            "nedsatt_ytterligare_text": nedsatt_ytterligare_text_input, "sarskilt_ansvar07_checked": sarskilt_ansvar07_checked, "sarskilt_ansvar_checked": sarskilt_ansvar_checked,
            "sarskilt_ansvar_passera_checked": sarskilt_ansvar_passera_checked, "sarskilt_ansvar_passera_text": sarskilt_ansvar_passera_text_input,
            "sarskilt_ansvar_ytterligare_checked": sarskilt_ansvar_ytterligare_checked,
            "sarskilt_ansvar_ytterligare_text": sarskilt_ansvar_ytterligare_text_input,
            "forare_namn": forare_namn_input, "utstardare_namn": utstardare_namn_input,
            "klockslag": klockslag_input, "ordernummer": ordernummer_input
        }
        
        pdf_bytes = skapa_etcs_baksida_dokument(form_data)
        
        st.success("PDF-blanketten (baksida) har skapats!")
        
        st.download_button(
            label="Ladda ner ifylld ETCS-blankett (Baksida)",
            data=pdf_bytes,
            file_name=f"ifylld_ETCS_Samlingsblankett_baksida_{form_data['tag_nr']}_{form_data['datum']}.pdf",
            mime="application/pdf",
        )

# ==============================================================================
# HUVUD-ROUTER FÖR APPLIKATIONEN
# ==============================================================================
if 'authentication_status' not in st.session_state:
    st.session_state.authentication_status = True

if st.session_state["authentication_status"]:
    if st.session_state.page == 'main':
        render_main_page()
    elif st.session_state.page == 'svenska':
        render_svenska_page()
    elif st.session_state.page == 'norska':
        render_norska_page()
    elif st.session_state.page == 'linjebocker':
        render_linjebocker_page()
    elif st.session_state.page == 'blanketter_menu':
        render_blanketter_menu_page()
    elif st.session_state.page == 'blankett_21':
        render_blankett_21_page()
    elif st.session_state.page == 'blankett_etcs':
        render_blankett_etcs_page()
    elif st.session_state.page == 'blankett_etcs_baksida':
        render_blankett_etcs_baksida_page()
