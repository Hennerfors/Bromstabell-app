import streamlit as st

# ==============================================================================
# STEG 1: DATADEFINITIONER
# ==============================================================================

# ----------------------------------------------------
# Data för Hastighetskollen (Svenska tabeller)
# ----------------------------------------------------
# Datastruktur:
# {
#   'Bana': {
#     (min_längd, max_längd): [
#       (min_broms, max_broms, hastighet),
#       ...
#     ],
#     ...
#   }
# }
# Not: -1 representerar ingen övre gräns.
HASTIGHETS_DATA = {
    'A': {
        (0, 100): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 85, 100), (86, 99, 110), (100, 118, 120), (119, 138, 130), (139, 143, 140), (144, -1, 150)],
        (101, 200): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 85, 100), (86, 103, 110), (104, 124, 120), (125, 146, 130), (147, -1, 140)],
        (201, 300): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 85, 100), (86, 107, 110), (108, 129, 120), (130, 153, 130), (154, -1, 140)],
        (301, 400): [ (0, 60, 60), (61, 68, 70), (69, 72, 80), (73, 74, 90), (75, 87, 100), (88, 109, 110), (110, 129, 120), (130, -1, 130)],
        (401, 460): [ (0, 60, 60), (61, 69, 70), (70, 72, 80), (73, 75, 90), (76, 90, 100), (91, 109, 110), (110, 132, 120), (133, -1, 130)],
        (461, 520): [ (0, 60, 60), (61, 71, 70), (72, 72, 80), (73, 75, 90), (76, 93, 100), (94, 116, 110), (117, 143, 120), (144, -1, 130)],
        (521, 570): [ (0, 60, 60), (61, 72, 70), (73, 75, 80), (76, 78, 90), (79, 97, 100), (98, 119, 110), (120, -1, 120)],
        (571, 620): [ (0, 60, 60), (61, 75, 70), (76, 78, 80), (79, 79, 90), (80, 100, 100), (101, 129, 110), (130, -1, 120)],
        (621, 670): [ (0, 60, 60), (61, 77, 70), (78, 79, 80), (80, 82, 90), (83, 104, 100), (105, 134, 110), (135, -1, 120)],
        (671, 710): [ (0, 60, 40), (61, 62, 50), (63, 64, 60), (65, 79, 70), (80, 82, 80), (83, 87, 90), (88, 109, 100), (110, -1, 110)],
        (711, 750): [ (0, 64, 40), (65, 65, 50), (66, 66, 60), (67, 68, 70), (69, 82, 80), (83, 87, 90), (88, 90, 100), (91, -1, 110)]
    },
    'B': {
        (0, 100): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 85, 100), (86, 99, 110), (100, 118, 120), (119, 121, 130), (122, 124, 140), (125, 134, 150), (135, 143, 160), (144, -1, 170)],
        (101, 200): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 85, 100), (86, 103, 110), (104, 124, 120), (125, 126, 130), (127, 137, 140), (138, 146, 150), (147, -1, 160)],
        (201, 300): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 85, 100), (86, 107, 110), (108, 129, 120), (130, 140, 140), (141, 150, 150), (151, -1, 160)],
        (301, 400): [ (0, 60, 60), (61, 68, 70), (69, 72, 80), (73, 74, 90), (75, 87, 100), (88, 109, 110), (110, 129, 120), (130, 132, 130), (133, 143, 140), (144, 153, 150), (154, -1, 160)],
        (401, 460): [ (0, 60, 60), (61, 69, 70), (70, 72, 80), (73, 75, 90), (76, 90, 100), (91, 109, 110), (110, 132, 120), (133, 134, 130), (135, 136, 140), (137, 147, 150), (148, -1, 160)],
        (461, 520): [ (0, 60, 60), (61, 71, 70), (72, 72, 80), (73, 75, 90), (76, 93, 100), (94, 116, 110), (117, 143, 120), (144, 150, 140), (151, -1, 150)],
        (521, 570): [ (0, 60, 60), (61, 72, 70), (73, 75, 80), (76, 78, 90), (79, 97, 100), (98, 119, 110), (120, -1, 120)],
        (571, 620): [ (0, 60, 60), (61, 75, 70), (76, 78, 80), (79, 79, 90), (80, 100, 100), (101, 129, 110), (130, -1, 120)],
        (621, 670): [ (0, 60, 60), (61, 77, 70), (78, 79, 80), (80, 82, 90), (83, 104, 100), (105, 134, 110), (135, -1, 120)],
        (671, 710): [ (0, 60, 40), (61, 62, 50), (63, 64, 60), (65, 79, 70), (80, 82, 80), (83, 87, 90), (88, 109, 100), (110, -1, 110)],
        (711, 750): [ (0, 64, 40), (65, 65, 50), (66, 66, 60), (67, 68, 70), (69, 82, 80), (83, 87, 90), (88, 90, 100), (91, -1, 110)]
    },
    'C': {
        (0, 100): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 97, 100), (98, 112, 110), (113, 121, 120), (122, 124, 130), (125, 134, 140), (135, 143, 150), (144, -1, 160)],
        (101, 200): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 99, 100), (100, 115, 110), (116, 124, 120), (125, 126, 130), (127, 137, 140), (138, 146, 150), (147, -1, 160)],
        (201, 300): [ (0, 60, 60), (61, 66, 70), (67, 71, 80), (72, 72, 90), (73, 102, 100), (103, 118, 110), (119, 126, 120), (127, 129, 130), (130, 140, 140), (141, 150, 150), (151, -1, 160)],
        (301, 400): [ (0, 60, 60), (61, 68, 70), (69, 72, 80), (73, 74, 90), (75, 103, 100), (104, 119, 110), (120, 129, 120), (130, 132, 130), (133, 143, 140), (144, 153, 150), (154, -1, 160)],
        (401, 460): [ (0, 60, 60), (61, 69, 70), (70, 72, 80), (73, 75, 90), (76, 106, 100), (107, 122, 110), (123, 134, 120), (135, 136, 130), (137, 147, 140), (148, -1, 150)],
        (461, 520): [ (0, 60, 60), (61, 71, 70), (72, 72, 80), (73, 75, 90), (76, 107, 100), (108, 126, 110), (127, 137, 120), (138, 140, 130), (141, 150, 140), (151, -1, 150)],
        (521, 570): [ (0, 60, 60), (61, 72, 70), (73, 75, 80), (76, 78, 90), (79, 111, 100), (112, 129, 110), (130, 143, 120), (144, -1, 130)],
        (571, 620): [ (0, 60, 60), (61, 75, 70), (76, 78, 80), (79, 79, 90), (80, 113, 100), (114, 134, 110), (135, 150, 120), (151, -1, 130)],
        (621, 670): [ (0, 60, 60), (61, 77, 70), (78, 79, 80), (80, 82, 90), (83, 116, 100), (117, 141, 110), (142, -1, 120)],
        (671, 710): [ (0, 60, 40), (61, 62, 50), (63, 64, 60), (65, 79, 70), (80, 82, 80), (83, 87, 90), (88, -1, 100)],
        (711, 750): [ (0, 64, 40), (65, 65, 50), (66, 66, 60), (67, 68, 70), (69, 82, 80), (83, 87, 90), (88, 90, 100), (91, -1, 110)]
    },
    'E': {
        (0, 100): [ (0, 57, 40), (58, 61, 50), (62, 66, 60), (67, 70, 70), (71, 75, 80), (76, 80, 90), (81, 85, 100), (86, 90, 110), (91, 95, 120), (96, -1, 130)],
        (101, 200): [ (0, 57, 40), (58, 62, 50), (63, 67, 60), (68, 72, 70), (73, 77, 80), (78, 82, 90), (83, 87, 100), (88, 92, 110), (93, 97, 120), (98, -1, 130)],
        (201, 300): [ (0, 57, 40), (58, 58, 50), (59, 63, 60), (64, 68, 70), (69, 73, 80), (74, 78, 90), (79, 83, 100), (84, 88, 110), (89, 93, 120), (94, 98, 130), (99, -1, 140)],
        (301, 400): [ (0, 57, 40), (58, 59, 50), (60, 64, 60), (65, 69, 70), (70, 74, 80), (75, 80, 90), (81, 85, 100), (86, 90, 110), (91, 95, 120), (96, 100, 130), (101, -1, 140)],
        (401, 460): [ (0, 57, 40), (58, 59, 50), (60, 65, 60), (66, 70, 70), (71, 75, 80), (76, 81, 90), (82, 86, 100), (87, 91, 110), (92, 97, 120), (98, 101, 130), (102, -1, 140)],
        (461, 520): [ (0, 57, 40), (58, 60, 50), (61, 65, 60), (66, 71, 70), (72, 76, 80), (77, 82, 90), (83, 87, 100), (88, 92, 110), (93, 98, 120), (99, 103, 130), (104, -1, 140)],
        (521, 570): [ (0, 57, 40), (58, 60, 50), (61, 66, 60), (67, 71, 70), (72, 77, 80), (78, 82, 90), (83, 88, 100), (89, 93, 110), (94, 99, 120), (100, 104, 130), (105, -1, 140)],
        (571, 620): [ (0, 57, 40), (58, 61, 50), (62, 67, 60), (68, 72, 70), (73, 78, 80), (79, 83, 90), (84, 89, 100), (90, 94, 110), (95, 100, 120), (101, 105, 130), (106, -1, 140)],
        (621, 670): [ (0, 57, 40), (58, 61, 50), (62, 67, 60), (68, 73, 70), (74, 78, 80), (79, 84, 90), (85, 90, 100), (91, 95, 110), (96, 101, 120), (102, 106, 130), (107, -1, 140)],
        (671, 710): [ (0, 57, 40), (58, 62, 50), (63, 68, 60), (69, 73, 70), (74, 79, 80), (80, 85, 90), (86, 90, 100), (91, 96, 110), (97, 101, 120), (102, 107, 130), (108, -1, 140)],
        (711, 750): [ (0, 57, 40), (58, 62, 50), (63, 68, 60), (69, 74, 70), (75, 80, 80), (81, 86, 90), (87, 92, 100), (93, 98, 110), (99, 104, 120), (105, 109, 130), (110, -1, 140)],
        (751, 780): [ (0, 57, 40), (58, 59, 50), (60, 63, 60), (64, 69, 70), (70, 76, 80), (77, 82, 90), (83, 89, 100), (90, 95, 110), (96, 101, 120), (102, 107, 130), (108, 112, 140), (113, -1, 150)],
        (781, 810): [ (0, 57, 40), (58, 60, 50), (61, 64, 60), (65, 71, 70), (72, 78, 80), (79, 85, 90), (86, 92, 100), (93, 99, 110), (100, 104, 120), (105, 110, 130), (111, 116, 140), (117, -1, 150)],
        (811, 850): [ (0, 57, 40), (58, 58, 50), (59, 67, 60), (68, 75, 70), (76, 82, 80), (83, 89, 90), (90, 97, 100), (98, 103, 110), (104, 109, 120), (110, 116, 130), (117, 122, 140), (123, -1, 150)],
    },
    'EM': {
        (0, 400): [ (0, 29, 40), (30, 30, 50), (31, 33, 60), (34, 37, 70), (38, 41, 80), (42, 45, 90), (46, 49, 100), (50, 52, 110), (53, 58, 120), (59, 63, 130), (64, 67, 140), (68, 73, 150), (74, 78, 160), (79, 83, 170), (84, 88, 180), (89, 93, 190), (94, -1, 200)],
        (401, 460): [ (0, 29, 40), (30, 30, 50), (31, 33, 60), (34, 37, 70), (38, 41, 80), (42, 46, 90), (47, 49, 100), (50, 53, 110), (54, 58, 120), (59, 63, 130), (64, 68, 140), (69, 74, 150), (75, 79, 160), (80, 84, 170), (85, 89, 180), (90, 94, 190), (95, -1, 200)],
        (461, 520): [ (0, 29, 40), (30, 30, 50), (31, 34, 60), (35, 37, 70), (38, 42, 80), (43, 46, 90), (47, 50, 100), (51, 54, 110), (55, 59, 120), (60, 64, 130), (65, 69, 140), (70, 75, 150), (76, 80, 160), (81, 85, 170), (86, 90, 180), (91, 96, 190), (97, -1, 200)],
        (521, 570): [ (0, 29, 40), (30, 31, 50), (32, 34, 60), (35, 38, 70), (39, 42, 80), (43, 47, 90), (48, 51, 100), (52, 54, 110), (55, 60, 120), (61, 65, 130), (66, 70, 140), (71, 75, 150), (76, 81, 160), (82, 86, 170), (87, 91, 180), (92, 97, 190), (98, -1, 200)],
        (571, 620): [ (0, 29, 40), (30, 31, 50), (32, 35, 60), (36, 38, 70), (39, 43, 80), (44, 47, 90), (48, 51, 100), (52, 55, 110), (56, 60, 120), (61, 65, 130), (66, 71, 140), (72, 76, 150), (77, 82, 160), (83, 87, 170), (88, 92, 180), (93, 98, 190), (99, -1, 200)],
        (621, 670): [ (0, 29, 40), (30, 31, 50), (32, 35, 60), (36, 39, 70), (40, 43, 80), (44, 48, 90), (49, 52, 100), (53, 56, 110), (57, 61, 120), (62, 66, 130), (67, 72, 140), (73, 77, 150), (78, 83, 160), (84, 88, 170), (89, 94, 180), (95, 99, 190), (100, -1, 200)],
        (671, 710): [ (0, 29, 40), (30, 31, 50), (32, 35, 60), (36, 39, 70), (40, 43, 80), (44, 48, 90), (49, 52, 100), (53, 56, 110), (57, 61, 120), (62, 67, 130), (68, 73, 140), (74, 79, 150), (80, 85, 160), (86, 91, 170), (92, 97, 180), (98, 103, 190), (104, -1, 200)],
        (711, 750): [ (0, 29, 40), (30, 32, 50), (33, 36, 60), (37, 39, 70), (40, 44, 80), (45, 49, 90), (50, 53, 100), (54, 56, 110), (57, 63, 120), (64, 70, 130), (71, 76, 140), (77, 82, 150), (83, 89, 160), (90, 95, 170), (96, 101, 180), (102, 106, 190), (107, -1, 200)],
        (751, 780): [ (0, 29, 40), (30, 32, 50), (33, 36, 60), (37, 40, 70), (41, 45, 80), (46, 50, 90), (51, 54, 100), (55, 58, 110), (59, 65, 120), (66, 71, 130), (72, 78, 140), (79, 85, 150), (86, 91, 160), (92, 98, 170), (99, 103, 180), (104, 109, 190), (110, -1, 200)],
        (781, 810): [ (0, 29, 40), (30, 33, 50), (34, 37, 60), (38, 41, 70), (42, 46, 80), (47, 51, 90), (52, 55, 100), (56, 60, 110), (61, 67, 120), (68, 74, 130), (75, 80, 140), (81, 87, 150), (88, 94, 160), (95, 100, 170), (101, 106, 180), (107, 112, 190), (113, -1, 200)],
        (811, 850): [ (0, 29, 40), (30, 30, 50), (31, 34, 60), (35, 38, 70), (39, 43, 80), (44, 47, 90), (48, 53, 100), (54, 57, 110), (58, 69, 120), (70, 77, 130), (78, 84, 140), (85, 91, 150), (92, 98, 160), (99, 104, 170), (105, 111, 180), (112, 117, 190), (118, -1, 200)],
        (851, 900): [ (0, 29, 40), (30, 31, 50), (32, 36, 60), (37, 40, 70), (41, 45, 80), (46, 50, 90), (51, 56, 100), (57, 60, 110), (61, 73, 120), (74, 81, 130), (82, 89, 140), (90, 97, 150), (98, 103, 160), (104, 110, 170), (111, 117, 180), (118, 123, 190), (124, -1, 200)]
    }
}

# ----------------------------------------------------
# Data för Bromstabell I (Norska tabeller)
# ----------------------------------------------------
# Struktur: {fall: {hastighet: erforderlig_bromsprocent}}
BREMSETABELL_1 = {
    0: {15: 5, 20: 5, 25: 6, 30: 7, 35: 7, 40: 8, 45: 10, 50: 13, 55: 16, 60: 20, 65: 24, 70: 29, 75: 35, 80: 42, 85: 52, 90: 59, 95: 69, 100: 79, 105: 89, 110: 98, 115: 109, 120: 120},
    1: {15: 5, 20: 5, 25: 6, 30: 7, 35: 7, 40: 8, 45: 10, 50: 14, 55: 17, 60: 22, 65: 26, 70: 31, 75: 37, 80: 44, 85: 52, 90: 61, 95: 71, 100: 81, 105: 91, 110: 100, 115: 111, 120: 122},
    2: {15: 5, 20: 5, 25: 6, 30: 7, 35: 8, 40: 9, 45: 10, 50: 15, 55: 19, 60: 23, 65: 28, 70: 32, 75: 39, 80: 46, 85: 54, 90: 63, 95: 72, 100: 82, 105: 92, 110: 102, 115: 113, 120: 124},
    3: {15: 5, 20: 5, 25: 6, 30: 7, 35: 8, 40: 9, 45: 11, 50: 16, 55: 20, 60: 24, 65: 34, 70: 41, 75: 48, 80: 56, 90: 65, 95: 74, 100: 84, 105: 94, 110: 104, 115: 115, 120: 126},
    4: {15: 5, 20: 6, 25: 7, 30: 8, 35: 9, 40: 10, 45: 12, 55: 21, 60: 26, 65: 36, 70: 43, 75: 50, 80: 58, 90: 67, 95: 76, 100: 86, 105: 96, 110: 106, 115: 117, 120: 128},
    5: {15: 5, 20: 6, 25: 7, 30: 8, 35: 9, 40: 11, 45: 14, 50: 18, 55: 23, 60: 27, 65: 34, 70: 45, 75: 52, 80: 60, 90: 69, 95: 78, 100: 87, 105: 97, 110: 108, 115: 119, 120: 130},
    6: {15: 6, 20: 7, 25: 8, 30: 9, 35: 10, 40: 11, 45: 12, 50: 15, 55: 19, 60: 24, 65: 36, 70: 40, 75: 47, 80: 61, 90: 71, 95: 80, 100: 89, 105: 99, 110: 110, 115: 121, 120: 132},
    7: {15: 6, 20: 7, 25: 9, 30: 10, 40: 13, 45: 16, 55: 25, 60: 30, 65: 37, 70: 49, 75: 56, 80: 63, 90: 72, 95: 82, 100: 91, 105: 101, 110: 112, 115: 123, 120: 134},
    8: {15: 6, 20: 8, 25: 10, 30: 11, 40: 15, 45: 18, 55: 26, 60: 32, 65: 38, 70: 43, 75: 50, 80: 57, 85: 63, 90: 73, 95: 83, 100: 92, 105: 103, 110: 113, 115: 124, 120: 136},
    9: {15: 7, 20: 9, 25: 11, 30: 13, 40: 17, 45: 19, 55: 28, 60: 33, 65: 44, 70: 51, 75: 58, 80: 64, 90: 74, 95: 84, 100: 94, 105: 104, 110: 115, 115: 125, 120: 138},
    10: {15: 7, 20: 9, 25: 11, 30: 13, 35: 14, 40: 18, 45: 20, 55: 29, 60: 34, 65: 40, 70: 45, 75: 52, 80: 59, 85: 65, 90: 75, 95: 85, 100: 95, 105: 105, 110: 116, 115: 126, 120: 140},
    11: {15: 8, 20: 10, 25: 12, 30: 14, 35: 16, 40: 19, 55: 26, 60: 31, 65: 36, 70: 41, 75: 46, 80: 53, 85: 60, 90: 66, 95: 76, 100: 86, 105: 96, 110: 107, 115: 117, 120: 128},
    12: {15: 8, 20: 12, 25: 13, 30: 15, 35: 17, 40: 20, 45: 23, 50: 27, 55: 32, 60: 37, 65: 42, 70: 47, 75: 54, 80: 61, 85: 68, 90: 77, 95: 87, 100: 98, 105: 108, 110: 119, 115: 130, 120: 144},
    13: {15: 8, 20: 12, 25: 14, 30: 16, 40: 21, 45: 25, 55: 33, 60: 38, 65: 43, 70: 48, 75: 55, 80: 62, 85: 69, 90: 78, 95: 88, 100: 99, 105: 109, 110: 120, 115: 132, 120: 146},
    14: {15: 9, 20: 13, 25: 15, 30: 17, 40: 22, 45: 26, 55: 34, 60: 39, 65: 44, 70: 49, 75: 56, 80: 63, 85: 70, 90: 79, 95: 89, 100: 100, 105: 110, 110: 122, 115: 134, 120: 148},
    15: {15: 9, 20: 14, 25: 16, 30: 18, 40: 23, 45: 27, 55: 35, 60: 40, 65: 45, 70: 50, 75: 58, 80: 64, 85: 72, 90: 81, 95: 90, 100: 101, 105: 112, 110: 124, 115: 136, 120: 150},
    16: {15: 10, 20: 15, 25: 17, 30: 20, 35: 22, 40: 25, 45: 29, 50: 33, 55: 37, 60: 42, 65: 47, 70: 52, 75: 60, 80: 66, 85: 74, 90: 83, 95: 92, 100: 102, 105: 114, 110: 126},
    17: {15: 10, 20: 16, 25: 18, 30: 21, 35: 23, 45: 30, 50: 34, 55: 38, 60: 44, 65: 48, 70: 54, 75: 62, 80: 68, 85: 76, 90: 85, 95: 94, 100: 104, 105: 116, 110: 128},
    18: {15: 11, 20: 17, 25: 19, 30: 22, 40: 28, 45: 31, 50: 35, 55: 40, 60: 46, 65: 50, 70: 56, 75: 64, 80: 70, 85: 78, 90: 87, 95: 96, 100: 106, 105: 118, 110: 130},
    19: {15: 12, 20: 18, 25: 20, 30: 23, 40: 29, 45: 32, 55: 42, 60: 48, 65: 58, 70: 66, 75: 72, 80: 80, 90: 89, 95: 98, 100: 108, 105: 120, 110: 132},
    20: {15: 13, 20: 19, 25: 22, 30: 24, 40: 30, 45: 34, 50: 38, 55: 44, 60: 49, 65: 54, 70: 60, 75: 68, 80: 75, 85: 82, 90: 91, 95: 100, 100: 110, 105: 122, 110: 135},
    21: {15: 14, 20: 20, 25: 23, 30: 25, 35: 28, 40: 32, 45: 35, 50: 40, 55: 46, 60: 51, 65: 56, 70: 62, 75: 70, 80: 76, 85: 84, 90: 93, 95: 102, 100: 113, 105: 124},
    22: {15: 15, 20: 21, 25: 24, 30: 26, 35: 29, 40: 33, 45: 36, 50: 41, 55: 47, 60: 52, 65: 57, 70: 64, 75: 71, 80: 78, 85: 86, 90: 95, 95: 104, 100: 114, 105: 126},
    23: {15: 17, 20: 22, 25: 25, 30: 27, 35: 30, 40: 34, 45: 38, 50: 43, 55: 48, 60: 53, 65: 59, 70: 65, 75: 72, 80: 79, 85: 88, 90: 97, 95: 106, 100: 116, 105: 129},
    24: {15: 18, 20: 23, 25: 26, 30: 28, 35: 31, 40: 35, 45: 39, 50: 44, 55: 49, 60: 55, 65: 60, 70: 66, 75: 73, 80: 80, 85: 90, 90: 98, 95: 108, 100: 118, 105: 133},
    25: {15: 19, 20: 24, 25: 27, 30: 29, 35: 32, 40: 36, 45: 40, 50: 45, 55: 50, 60: 56, 65: 62, 70: 68, 75: 74, 80: 82, 85: 91, 90: 100, 95: 110, 100: 120},
    30: {15: 26, 20: 29, 25: 31, 30: 34, 35: 38, 40: 42, 45: 46, 50: 50, 55: 56, 60: 61, 65: 69, 70: 76, 75: 83, 80: 91, 85: 100, 90: 109},
    35: {15: 31, 20: 35, 25: 39, 30: 43, 35: 48, 40: 53, 45: 60, 50: 69, 55: 70, 60: 79},
    40: {15: 38, 20: 42, 25: 45, 30: 49, 35: 54, 40: 60, 45: 69, 50: 78},
    45: {15: 44, 20: 47, 25: 51, 30: 56, 35: 61, 40: 68, 45: 77},
    50: {15: 55, 20: 58, 25: 63, 30: 67, 35: 72, 40: 78},
    55: {15: 64, 20: 67, 25: 70, 30: 77}
}

# ==============================================================================
# STEG 2: LOGIK OCH FUNKTIONER
# ==============================================================================

# ----------------------------------------------------
# Sökfunktion för Hastighetskollen
# ----------------------------------------------------
def hitta_max_hastighet(bana, tåglängd, bromsprocent):
    """
    Hittar den maximala hastigheten genom att slå upp i HASTIGHETS_DATA.
    """
    if bana not in HASTIGHETS_DATA:
        return "Okänd bana vald."

    # Hitta rätt längdintervall
    valt_längdintervall = None
    for (min_längd, max_längd), data in HASTIGHETS_DATA[bana].items():
        if min_längd <= tåglängd <= max_längd:
            valt_längdintervall = data
            break

    if not valt_längdintervall:
        return "Tåglängden finns inte med i tabellen för den valda banan."

    # Hitta rätt hastighet baserat på bromsprocent
    for min_broms, max_broms, hastighet in valt_längdintervall:
        # Hantera "oändligt" intervall (där vi använde -1)
        if max_broms == -1 and bromsprocent >= min_broms:
            return hastighet
        # Hantera vanliga intervall
        if min_broms <= bromsprocent <= max_broms:
            return hastighet

    return "Ingen hastighet hittades för angiven bromsprocent. Den kan vara för låg."

# ----------------------------------------------------
# Sökfunktion för Bromstabell I
# ----------------------------------------------------
def hitta_hastighet_fra_bremsetabell(fall, tillgänglig_bremseprosent):
    """
    Hittar den högsta möjliga hastigheten från Bremsetabell I.
    """
    if fall not in BREMSETABELL_1:
        return f"Bestämmande fall {fall}‰ finns inte i tabellen."

    hastighetsdata_for_fall = BREMSETABELL_1[fall]
    
    # Sortera hastigheterna från högst till lägst för att hitta den maximala först
    sorterade_hastigheter = sorted(hastighetsdata_for_fall.keys(), reverse=True)
    
    for hastighet in sorterade_hastigheter:
        erforderlig_bremseprosent = hastighetsdata_for_fall[hastighet]
        
        # Om vår tillgängliga bromsprocent är tillräcklig, är detta vår maxhastighet
        if tillgänglig_bremseprosent >= erforderlig_bremseprosent:
            return hastighet
            
    # Om ingen hastighet hittades är bromsprocenten för låg
    return "Bromsprocenten är för låg för körning på denna sträcka."


# ==============================================================================
# STEG 3: WEBBAPPLIKATION MED STREAMLIT
# ==============================================================================

st.set_page_config(page_title="Tåghastighetskalkyler", page_icon="🚄", layout="wide")

# Centrerad logotyp
col1, col2, col3 = st.columns([1, 2, 1])
with col2:
    try:
        st.image("OnRail.png", width=300)
    except Exception:
        st.write(" ") # If image is not found, leave space

st.title('🚄 Tåghastighetskalkyler')
st.write("Ett verktyg för att hitta högsta tillåtna hastighet baserat på indata från svenska och norska tabeller.")

# Skapa två flikar för de olika kalkylatorerna
tab1, tab2 = st.tabs(["Hastighetskollen (Sverige)", "Kalkylator för Bromstabell i (Norge)"])


# ----------------------------------------------------
# Flik 1: Hastighetskollen
# ----------------------------------------------------
with tab1:
    st.header("Hastighetskollen enligt Trafikverkets tabeller")
    
    # Dialogruta för karta
    @st.dialog("Översiktskarta")
    def visa_karta_dialog():
        st.subheader("Karta över bandelar A, B, C, E och EM")
        try:
            st.image("Karta.png")
        except Exception:
            st.warning("Bilden 'Karta.png' kunde inte hittas.")

    if st.button("🗺️ Visa översiktskarta över svenska bandelar"):
        visa_karta_dialog()

    # Välj bana
    bana_vald = st.selectbox(
        'Välj bana:',
        options=list(HASTIGHETS_DATA.keys()),
        key='bana_select'
    )

    # Mata in värden
    kol1, kol2 = st.columns(2)
    with kol1:
        tåglängd_inmatad = st.number_input(
            'Ange tåglängd (meter):',
            min_value=0,
            max_value=1500,
            value=350,
            step=10,
            help="Ange tågets totala längd i meter."
        )

    with kol2:
        bromsprocent_inmatad_tab1 = st.number_input(
            'Ange tillgänglig bromsprocent:',
            min_value=0,
            max_value=200,
            value=100,
            step=1,
            help="Ange den tillgängliga bromsprocenten för tågsättet.",
            key='broms_tab1'
        )

    # Knapp och resultat
    if st.button('Hitta högsta tillåtna hastighet', key='button_tab1'):
        resultat = hitta_max_hastighet(bana_vald, tåglängd_inmatad, bromsprocent_inmatad_tab1)

        st.subheader('Resultat')
        if isinstance(resultat, int):
            st.metric(
                label=f"Högsta tillåtna hastighet (sth)",
                value=f"{resultat} km/h"
            )
            st.success(f"Resultatet är baserat på tabellen för bana **{bana_vald}**.")
        else:
            st.error(resultat)

# ----------------------------------------------------
# Flik 2: Bromstabell I
# ----------------------------------------------------
with tab2:
    st.header("Kalkylator för Bromstabell i Norge")
    st.write("Ange bestämmande fall och tillgänglig bromsprocent för att hitta den högsta tillåtna hastigheten.")
    
   # Input-fält i kolumner
    col1_tab2, col2_tab2 = st.columns(2)

    with col1_tab2:
        # Byt ut selectbox mot number_input för att tillåta fri inmatning.
        fall_inmatad = st.number_input(
            'Ange bestämmande fall (‰):',
            min_value=0,
            value=10, # Sätter ett vanligt standardvärde
            step=1,
            help="Ange den största medellutningen i promille. Appen meddelar om det exakta värdet inte finns i tabellen."
        )

    with col2_tab2:
        bremseprosent_inmatad_tab2 = st.number_input(
            'Ange tillgänglig bromsprocent (%):',
            min_value=0,
            max_value=200,
            value=100,
            step=1,
            key='broms_tab2'
        )

    # Knapp och resultatvisning
    if st.button('Beräkna hastighet', key='button_tab2'):
        resultat_tab2 = hitta_hastighet_fra_bremsetabell(fall_inmatad, bremseprosent_inmatad_tab2)

        st.subheader("Resultat")
        if isinstance(resultat_tab2, int):
            st.metric(
                label=f"Högsta tillåtna hastighet",
                value=f"{resultat_tab2} km/h",
                help=f"För fall {fall_inmatad}‰ och bromsprocent {bremseprosent_inmatad_tab2}%."
            )
        else:
            st.error(resultat_tab2)
    
    st.info("Observera: Data är tolkad från Bromstabell I. Dubbelkolla alltid mot officiella källor vid faktisk operativ användning.")
